[{"name":"al","alt_names":["AL","al"],"description":"Accumulator","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"ia32_efer","alt_names":["IA32_EFER","ia32_efer"],"description":"The Extended Feature Enable Register (EFER) is a model-specific register added in the AMD K6 processor, to allow enabling the SYSCALL/SYSRET instruction, and later for entering and exiting long mode. This register becomes architectural in AMD64 and has been adopted by Intel. Its MSR number is 0xC0000080.","reg_type":"MSR","width":"Bits64","flag_info":[{"bit":0,"label":"SCE","description":"System Call Extensions","pae":"","long_mode":""},{"bit":1,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":2,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":3,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":4,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":5,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":6,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":7,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":8,"label":"LME","description":"Long Mode Enable","pae":"","long_mode":""},{"bit":9,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":10,"label":"LMA","description":"Long Mode Active","pae":"","long_mode":""},{"bit":11,"label":"NXE","description":"No-Execute Enable","pae":"","long_mode":""},{"bit":12,"label":"SVME","description":"Secure Virtual Machine Enable","pae":"","long_mode":""},{"bit":13,"label":"LMSLE","description":"Long Mode Segment Limit Enable","pae":"","long_mode":""},{"bit":14,"label":"FFXSR","description":"Fast FXSAVE/FXSTOR","pae":"","long_mode":""},{"bit":15,"label":"TCE","description":"Translate Cache Extension","pae":"","long_mode":""},{"bit":16,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":17,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":18,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":19,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":20,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":21,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":22,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":23,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":24,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":25,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":26,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":27,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":28,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":29,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":30,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":31,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":32,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":33,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":34,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":35,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":36,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":37,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":38,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":39,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":40,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":41,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":42,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":43,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":44,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":45,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":46,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":47,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":48,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":49,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":50,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":51,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":52,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":53,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":54,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":55,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":56,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":57,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":58,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":59,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":60,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":61,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":62,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":63,"label":"","description":"Reserved","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"xmm16","alt_names":["XMM16","xmm16"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm17","alt_names":["XMM17","xmm17"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm19","alt_names":["XMM19","xmm19"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm25","alt_names":["XMM25","xmm25"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm29","alt_names":["YMM29","ymm29"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"rcx","alt_names":["RCX","rcx"],"description":"Counter","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"bl","alt_names":["BL","bl"],"description":"Base","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"cr3","alt_names":["CR3","cr3"],"description":"Control Register 3. This must be page aligned.","reg_type":"Control","width":"Bits64","flag_info":[{"bit":0,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":1,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":2,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":3,"label":"PWT if CR4.PCIDE = 0","description":"Page-Level Write Through if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":4,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":5,"label":"PCD if CR4.PCIDE = 0","description":"Page-Level Cache Disable if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":6,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":7,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":8,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":9,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":10,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":11,"label":"","description":"Reserved if CR4.PCIDE = 0. PCID if CR4.PCIDE = 1","pae":"","long_mode":""},{"bit":12,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":13,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":14,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":15,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":16,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":17,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":18,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":19,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":20,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":21,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":22,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":23,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":24,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":25,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":26,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":27,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":28,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":29,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":30,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":31,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":32,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":33,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":34,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":35,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":36,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":37,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":38,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":39,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":40,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":41,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":42,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":43,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":44,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":45,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":46,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":47,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":48,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":49,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":50,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":51,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":52,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":53,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":54,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":55,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":56,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":57,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":58,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":59,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":60,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":61,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":62,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""},{"bit":63,"label":"","description":"Physical Base Address of the PML4","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"ymm19","alt_names":["YMM19","ymm19"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm15","alt_names":["ZMM15","zmm15"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"esp","alt_names":["ESP","esp"],"description":"Stack Pointer","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"esi","alt_names":["ESI","esi"],"description":"Source index for string operations","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"gdtr","alt_names":["GDTR","gdtr"],"description":"","reg_type":"ProtectedMode","width":null,"flag_info":[{"bit":0,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":1,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":2,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":3,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":4,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":5,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":6,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":7,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":8,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":9,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":10,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":11,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":12,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":13,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":14,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":15,"label":"Limit","description":"Size of GDT","pae":"","long_mode":""},{"bit":16,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":17,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":18,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":19,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":20,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":21,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":22,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":23,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":24,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":25,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":26,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":27,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":28,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":79,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":30,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":31,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":32,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":33,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":34,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":35,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":36,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":37,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":38,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":39,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":40,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":41,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":42,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":43,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":44,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":45,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":46,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":47,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":48,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":49,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":50,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":51,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":52,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":53,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":54,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":55,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":56,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":57,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":58,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":59,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":60,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":61,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":62,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":63,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":64,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":65,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":66,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":67,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":68,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":69,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":70,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":71,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":72,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":73,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":74,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":75,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":76,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":77,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":78,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":79,"label":"Base","description":"Starting address of GDR (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"xmm24","alt_names":["XMM24","xmm24"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm30","alt_names":["YMM30","ymm30"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm16","alt_names":["ZMM16","zmm16"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm17","alt_names":["YMM17","ymm17"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm17","alt_names":["ZMM17","zmm17"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm22","alt_names":["ZMM22","zmm22"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"cr0","alt_names":["CR0","cr0"],"description":"Control Register 0. This is the only control register that can be written and read via 2 ways unlike the others that can be accessed only via the MOV instruction.","reg_type":"Control","width":"Bits64","flag_info":[{"bit":0,"label":"PE","description":"Protected Mode Enable","pae":"","long_mode":""},{"bit":1,"label":"MP","description":"Monitor co-processor","pae":"","long_mode":""},{"bit":2,"label":"EM","description":"x87 FPU Emulation","pae":"","long_mode":""},{"bit":3,"label":"TS","description":"Task switched","pae":"","long_mode":""},{"bit":4,"label":"ET","description":"Extension type","pae":"","long_mode":""},{"bit":5,"label":"NE","description":"Numeric error","pae":"","long_mode":""},{"bit":6,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":7,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":8,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":9,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":10,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":11,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":12,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":13,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":14,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":15,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":16,"label":"WP","description":"Write protect","pae":"","long_mode":""},{"bit":17,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":18,"label":"AM","description":"Alignment mask","pae":"","long_mode":""},{"bit":19,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":20,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":21,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":22,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":23,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":24,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":25,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":26,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":27,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":28,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":29,"label":"NW","description":"Not-write through","pae":"","long_mode":""},{"bit":30,"label":"CD","description":"Cache disable","pae":"","long_mode":""},{"bit":31,"label":"PG","description":"Paging","pae":"","long_mode":""},{"bit":32,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":33,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":34,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":35,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":36,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":37,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":38,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":39,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":40,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":41,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":42,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":43,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":44,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":45,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":46,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":47,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":48,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":49,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":50,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":51,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":52,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":53,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":54,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":55,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":56,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":57,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":58,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":59,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":60,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":61,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":62,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":63,"label":"","description":"Reserved","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"dr0","alt_names":["DR0","dr0"],"description":"Can contain linear address of a breakpoint. If paging is enabled, it is translated to a physical address","reg_type":"Debug","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"r11w","alt_names":["R11W","r11w"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"cr6","alt_names":["CR6","cr6"],"description":"Control Register 6. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"rsp","alt_names":["RSP","rsp"],"description":"Stack Pointer","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm8","alt_names":["XMM8","xmm8"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"rbx","alt_names":["RBX","rbx"],"description":"Base","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm18","alt_names":["ZMM18","zmm18"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm30","alt_names":["ZMM30","zmm30"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm20","alt_names":["XMM20","xmm20"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"rax","alt_names":["RAX","rax"],"description":"Accumulator","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"dx","alt_names":["DX","dx"],"description":"Data (commonly extends the A register)","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"r9w","alt_names":["R9W","r9w"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"kernelgsbase","alt_names":["KERNELGSBASE","kernelgsbase"],"description":"MSR with the address 0xC0000102. Is basically a buffer that gets exchanged with GS.base after a swapgs instruction. Usually used to separate kernel and other use of the GS register.","reg_type":"MSR","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"ymm16","alt_names":["YMM16","ymm16"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm19","alt_names":["ZMM19","zmm19"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm28","alt_names":["XMM28","xmm28"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"r14d","alt_names":["R14D","r14d"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"r9d","alt_names":["R9D","r9d"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm15","alt_names":["YMM15","ymm15"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"tr3","alt_names":["TR3","tr3"],"description":"Undocumented","reg_type":"Test","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"di","alt_names":["DI","di"],"description":"Destination index for string operations","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"r13w","alt_names":["R13W","r13w"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"r10b","alt_names":["R10B","r10b"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm7","alt_names":["XMM7","xmm7"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm29","alt_names":["ZMM29","zmm29"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"r9","alt_names":["R9","r9"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"tr6","alt_names":["TR6","tr6"],"description":"Test command register","reg_type":"Test","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"dr6","alt_names":["DR6","dr6"],"description":"Permits the debugger to determine which debug conditions have occurred. When an enabled debug exception is triggered, low order bits 0-3 are set before entering debug exception handler.","reg_type":null,"width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"cr11","alt_names":["CR11","cr11"],"description":"Control Register 11. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"cr8","alt_names":["CR8","cr8"],"description":"Control Register 8. CR8 is used to prioritize external interrupts and is referred to as the task-priority register (TPR).\n\nThe AMD64 architecture allows software to define up to 15 external interrupt-priority classes. Priority classes are numbered from 1 to 15, with priority-class 1 being the lowest and priority-class 15 the highest. CR8 uses the four low-order bits for specifying a task priority and the remaining 60 bits are reserved and must be written with zeros.\n\nSystem software can use the TPR register to temporarily block low-priority interrupts from interrupting a high-priority task. This is accomplished by loading TPR with a value corresponding to the highest-priority interrupt that is to be blocked. For example, loading TPR with a value of 9 (1001b) blocks all interrupts with a priority class of 9 or less, while allowing all interrupts with a priority class of 10 or more to be recognized. Loading TPR with 0 enables all external interrupts. Loading TPR with 15 (1111b) disables all external interrupts.\n\nThe TPR is cleared to 0 on reset.","reg_type":"Control","width":"Bits64","flag_info":[{"bit":0,"label":"","description":"Priority","pae":"","long_mode":""},{"bit":1,"label":"","description":"Priority","pae":"","long_mode":""},{"bit":2,"label":"","description":"Priority","pae":"","long_mode":""},{"bit":3,"label":"","description":"Priority","pae":"","long_mode":""},{"bit":4,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":5,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":6,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":7,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":8,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":9,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":10,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":11,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":12,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":13,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":14,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":15,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":16,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":17,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":18,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":19,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":20,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":21,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":22,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":23,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":24,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":25,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":26,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":27,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":28,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":29,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":30,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":31,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":32,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":33,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":34,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":35,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":36,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":37,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":38,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":39,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":40,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":41,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":42,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":43,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":44,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":45,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":46,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":47,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":48,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":49,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":50,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":51,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":52,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":53,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":54,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":55,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":56,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":57,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":58,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":59,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":60,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":61,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":62,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":63,"label":"","description":"Reserved","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"idtr","alt_names":["IDTR","idtr"],"description":"","reg_type":"ProtectedMode","width":null,"flag_info":[{"bit":0,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":1,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":2,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":3,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":4,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":5,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":6,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":7,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":8,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":9,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":10,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":11,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":12,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":13,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":14,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":15,"label":"Limit","description":"Size of IDT","pae":"","long_mode":""},{"bit":16,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":17,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":18,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":19,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":20,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":21,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":22,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":23,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":24,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":25,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":26,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":27,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":28,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":79,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":30,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":31,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":32,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":33,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":34,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":35,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":36,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":37,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":38,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":39,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":40,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":41,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":42,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":43,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":44,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":45,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":46,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":47,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":48,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":49,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":50,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":51,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":52,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":53,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":54,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":55,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":56,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":57,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":58,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":59,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":60,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":61,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":62,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":63,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":64,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":65,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":66,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":67,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":68,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":69,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":70,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":71,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":72,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":73,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":74,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":75,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":76,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":77,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":78,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""},{"bit":79,"label":"Base","description":"Starting address of IDT (Bits 16-47 if 32 bit operand, bits 16-79 if 64 bit operand)","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"xmm10","alt_names":["XMM10","xmm10"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm23","alt_names":["XMM23","xmm23"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm7","alt_names":["YMM7","ymm7"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm14","alt_names":["YMM14","ymm14"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"sp","alt_names":["SP","sp"],"description":"Stack Pointer","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm5","alt_names":["ZMM5","zmm5"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"r12w","alt_names":["R12W","r12w"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"dl","alt_names":["DL","dl"],"description":"Data (commonly extends the A register)","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"rip","alt_names":["RIP","rip"],"description":"Instruction Pointer. Can only be used in RIP-relative addressing.","reg_type":"Pointer","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm3","alt_names":["ZMM3","zmm3"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm4","alt_names":["ZMM4","zmm4"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm24","alt_names":["ZMM24","zmm24"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"ah","alt_names":["AH","ah"],"description":"Accumulator. Cannot be accessed when using the REX.W instruction prefix. The prefixed is added (automatically by assemblers) when an operand contains a 64-bit register","reg_type":"GeneralPurpose","width":"Upper8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"bp","alt_names":["BP","bp"],"description":"Base Pointer (meant for stack frames)","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"r12d","alt_names":["R12D","r12d"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"bx","alt_names":["BX","bx"],"description":"Base","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm0","alt_names":["XMM0","xmm0"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"r11","alt_names":["R11","r11"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"cr13","alt_names":["CR13","cr13"],"description":"Control Register 13. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"zmm27","alt_names":["ZMM27","zmm27"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm15","alt_names":["XMM15","xmm15"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"r9b","alt_names":["R9B","r9b"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"gs","alt_names":["GS","gs"],"description":"General Purpose G Segment. MSRs can change its base.","reg_type":"Segment","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm4","alt_names":["YMM4","ymm4"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"tr","alt_names":["TR","tr"],"description":"Stores the segment selector of the TSS","reg_type":"ProtectedMode","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"ip","alt_names":["IP","ip"],"description":"Instruction Pointer. Can only be used in RIP-relative addressing.","reg_type":"Pointer","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"cr14","alt_names":["CR14","cr14"],"description":"Control Register 14. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"ymm0","alt_names":["YMM0","ymm0"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm31","alt_names":["YMM31","ymm31"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm23","alt_names":["ZMM23","zmm23"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"r12b","alt_names":["R12B","r12b"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm22","alt_names":["XMM22","xmm22"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm9","alt_names":["ZMM9","zmm9"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"ax","alt_names":["AX","ax"],"description":"Accumulator","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"si","alt_names":["SI","si"],"description":"Source index for string operations","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"edx","alt_names":["EDX","edx"],"description":"Data (commonly extends the A register)","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"cr7","alt_names":["CR7","cr7"],"description":"Control Register 7. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"xmm1","alt_names":["XMM1","xmm1"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm30","alt_names":["XMM30","xmm30"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm28","alt_names":["ZMM28","zmm28"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm20","alt_names":["YMM20","ymm20"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"ss","alt_names":["SS","ss"],"description":"Stack Segment. Treated as if its base is 0 no matter what the segment descriptors in the GDT say.","reg_type":"Segment","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"r13d","alt_names":["R13D","r13d"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"ldtr","alt_names":["LDTR","ldtr"],"description":"Stores the segment selector of the LDT","reg_type":"ProtectedMode","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"dr3","alt_names":["DR3","dr3"],"description":"Can contain linear address of a breakpoint. If paging is enabled, it is translated to a physical address","reg_type":"Debug","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"cr9","alt_names":["CR9","cr9"],"description":"Control Register 9. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"xmm11","alt_names":["XMM11","xmm11"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"cr12","alt_names":["CR12","cr12"],"description":"Control Register 12. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"ebx","alt_names":["EBX","ebx"],"description":"Base","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"r14b","alt_names":["R14B","r14b"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"cl","alt_names":["CL","cl"],"description":"Counter","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"ch","alt_names":["CH","ch"],"description":"Counter. Cannot be accessed when using the REX.W instruction prefix. The prefixed is added (automatically by assemblers) when an operand contains a 64-bit register","reg_type":"GeneralPurpose","width":"Upper8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm24","alt_names":["YMM24","ymm24"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm11","alt_names":["ZMM11","zmm11"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm14","alt_names":["ZMM14","zmm14"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm18","alt_names":["XMM18","xmm18"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm25","alt_names":["ZMM25","zmm25"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"r15w","alt_names":["R15W","r15w"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"dr2","alt_names":["DR2","dr2"],"description":"Can contain linear address of a breakpoint. If paging is enabled, it is translated to a physical address","reg_type":"Debug","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"ymm11","alt_names":["YMM11","ymm11"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm2","alt_names":["XMM2","xmm2"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm27","alt_names":["YMM27","ymm27"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"rdx","alt_names":["RDX","rdx"],"description":"Data (commonly extends the A register)","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"tr4","alt_names":["TR4","tr4"],"description":"Undocumented","reg_type":"Test","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"zmm26","alt_names":["ZMM26","zmm26"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"cs","alt_names":["CS","cs"],"description":"Code Segment. Treated as if its base is 0 no matter what the segment descriptors in the GDT say.","reg_type":"Segment","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"tr7","alt_names":["TR7","tr7"],"description":"Test data register","reg_type":"Test","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"ymm26","alt_names":["YMM26","ymm26"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"dh","alt_names":["DH","dh"],"description":"Data (commonly extends the A register). Cannot be accessed when using the REX.W instruction prefix. The prefixed is added (automatically by assemblers) when an operand contains a 64-bit register","reg_type":"GeneralPurpose","width":"Upper8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm26","alt_names":["XMM26","xmm26"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm8","alt_names":["YMM8","ymm8"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm3","alt_names":["YMM3","ymm3"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm0","alt_names":["ZMM0","zmm0"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm10","alt_names":["ZMM10","zmm10"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm18","alt_names":["YMM18","ymm18"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"sil","alt_names":["SIL","sil"],"description":"Source index for string operations","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"rbp","alt_names":["RBP","rbp"],"description":"Base Pointer (meant for stack frames)","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"r15d","alt_names":["R15D","r15d"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm21","alt_names":["XMM21","xmm21"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"r11d","alt_names":["R11D","r11d"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm21","alt_names":["YMM21","ymm21"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"r13","alt_names":["R13","r13"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm2","alt_names":["YMM2","ymm2"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"bpl","alt_names":["BPL","bpl"],"description":"Base Pointer (meant for stack frames)","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"eip","alt_names":["EIP","eip"],"description":"Instruction Pointer. Can only be used in RIP-relative addressing.","reg_type":"Pointer","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm5","alt_names":["YMM5","ymm5"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm12","alt_names":["ZMM12","zmm12"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"tr5","alt_names":["TR5","tr5"],"description":"Undocumented","reg_type":"Test","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"ymm1","alt_names":["YMM1","ymm1"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"spl","alt_names":["SPL","spl"],"description":"Stack Pointer","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm3","alt_names":["XMM3","xmm3"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ebp","alt_names":["EBP","ebp"],"description":"Base Pointer (meant for stack frames)","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"rdi","alt_names":["RDI","rdi"],"description":"Destination index for string operations","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"eax","alt_names":["EAX","eax"],"description":"Accumulator","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"es","alt_names":["ES","es"],"description":"Extra Segment (used for string operations). Treated as if its base is 0 no matter what the segment descriptors in the GDT say.","reg_type":"Segment","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"cr5","alt_names":["CR5","cr5"],"description":"Control Register 5. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"r8b","alt_names":["R8B","r8b"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"r15","alt_names":["R15","r15"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"cr15","alt_names":["CR15","cr15"],"description":"Control Register 15. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"r14w","alt_names":["R14W","r14w"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"dr1","alt_names":["DR1","dr1"],"description":"Can contain linear address of a breakpoint. If paging is enabled, it is translated to a physical address","reg_type":"Debug","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"ymm13","alt_names":["YMM13","ymm13"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm5","alt_names":["XMM5","xmm5"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm10","alt_names":["YMM10","ymm10"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm22","alt_names":["YMM22","ymm22"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm23","alt_names":["YMM23","ymm23"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"cr4","alt_names":["CR4","cr4"],"description":"Control Register 4","reg_type":"Control","width":"Bits64","flag_info":[{"bit":0,"label":"VME","description":"Virtual 8086 Mode Extensions","pae":"","long_mode":""},{"bit":1,"label":"PVI","description":"Protected-mode Virtual Interrupts","pae":"","long_mode":""},{"bit":2,"label":"TSD","description":"Time Stamp Disable","pae":"","long_mode":""},{"bit":3,"label":"DE","description":"Debugging Extensions","pae":"","long_mode":""},{"bit":4,"label":"PSE","description":"Page Size Extension","pae":"","long_mode":""},{"bit":5,"label":"PAE","description":"Physical Address Extension","pae":"","long_mode":""},{"bit":6,"label":"MCE","description":"Machine Check Exception","pae":"","long_mode":""},{"bit":7,"label":"PGE","description":"Page Global Enabled","pae":"","long_mode":""},{"bit":8,"label":"PCE","description":"Performance-Monitoring Counter enable","pae":"","long_mode":""},{"bit":9,"label":"OSFXSR","description":"Operating system support for FXSAVE and FXRSTOR operations","pae":"","long_mode":""},{"bit":10,"label":"OSXMMEXCPT","description":"Operating System Support for Unmasked SIMD Floating-Point Exceptions","pae":"","long_mode":""},{"bit":11,"label":"UMIP","description":"User-Mode Instruction Prevention (if set, #GP on SGDT, SIDT, SLDT, SMSW, and STR instructions when CPL>0)","pae":"","long_mode":""},{"bit":12,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":13,"label":"VMXE","description":"Virtual Machine Extensions Enable","pae":"","long_mode":""},{"bit":14,"label":"SMXE","description":"Safer Mode Extensions Enable","pae":"","long_mode":""},{"bit":15,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":16,"label":"FSGSBASE","description":"Enables the instructions RDFSBASE, RDGSBASE, WRFSBASE, and WRGSBASE","pae":"","long_mode":""},{"bit":17,"label":"PCIDE","description":"PCID Enable","pae":"","long_mode":""},{"bit":18,"label":"OSXSAVE","description":"XSAVE and Processor Extended States Enable","pae":"","long_mode":""},{"bit":19,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":20,"label":"SMEP","description":"Supervisor Mode Execution Protection Enable","pae":"","long_mode":""},{"bit":21,"label":"SMAP","description":"Supervisor Modde Access Prevention Enable","pae":"","long_mode":""},{"bit":22,"label":"PKE","description":"Protection Key Enable","pae":"","long_mode":""},{"bit":23,"label":"CET","description":"Control-flow Enforcement Technology","pae":"","long_mode":""},{"bit":24,"label":"PKS","description":"Enable Protection Keys for Supervisor-Mode Pages","pae":"","long_mode":""},{"bit":25,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":26,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":27,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":28,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":29,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":30,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":31,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":32,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":33,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":34,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":35,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":36,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":37,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":38,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":39,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":40,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":41,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":42,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":43,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":44,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":45,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":46,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":47,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":48,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":49,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":50,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":51,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":52,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":53,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":54,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":55,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":56,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":57,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":58,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":59,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":60,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":61,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":62,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":63,"label":"","description":"Reserved","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"ymm25","alt_names":["YMM25","ymm25"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"r10d","alt_names":["R10D","r10d"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"dr7","alt_names":["DR7","dr7"],"description":"A local breakpoint bit deactivates on hardware task switches, while a global does not. Condition 00b means execution break, 01b means a write watchpoint, and 11b means a R/W watchpoint. 10b is reserved for I/O R/W (unsupported)","reg_type":"Debug","width":"Bits32","flag_info":[{"bit":0,"label":"","description":"Local DR0 breakpoint","pae":"","long_mode":""},{"bit":1,"label":"","description":"Global DR0 breakpoint","pae":"","long_mode":""},{"bit":2,"label":"","description":"Local DR1 breakpoint","pae":"","long_mode":""},{"bit":3,"label":"","description":"Global DR1 breakpoint","pae":"","long_mode":""},{"bit":4,"label":"","description":"Local DR2 breakpoint","pae":"","long_mode":""},{"bit":5,"label":"","description":"Global DR2 breakpoint","pae":"","long_mode":""},{"bit":6,"label":"","description":"Local DR3 breakpoint","pae":"","long_mode":""},{"bit":7,"label":"","description":"Global DR3 breakpoint","pae":"","long_mode":""},{"bit":8,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":9,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":10,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":11,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":12,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":13,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":14,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":15,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":16,"label":"","description":"Condition for DR0","pae":"","long_mode":""},{"bit":17,"label":"","description":"Condition for DR0","pae":"","long_mode":""},{"bit":18,"label":"","description":"Size of DR0 breakpoint","pae":"","long_mode":""},{"bit":19,"label":"","description":"Size of DR0 breakpoint","pae":"","long_mode":""},{"bit":20,"label":"","description":"Condition for DR1","pae":"","long_mode":""},{"bit":21,"label":"","description":"Condition for DR1","pae":"","long_mode":""},{"bit":22,"label":"","description":"Size of DR1 breakpoint","pae":"","long_mode":""},{"bit":23,"label":"","description":"Size of DR1 breakpoint","pae":"","long_mode":""},{"bit":24,"label":"","description":"Condition for DR2","pae":"","long_mode":""},{"bit":25,"label":"","description":"Condition for DR2","pae":"","long_mode":""},{"bit":26,"label":"","description":"Size of DR2 breakpoint","pae":"","long_mode":""},{"bit":27,"label":"","description":"Size of DR2 breakpoint","pae":"","long_mode":""},{"bit":28,"label":"","description":"Condition for DR3","pae":"","long_mode":""},{"bit":29,"label":"","description":"Condition for DR3","pae":"","long_mode":""},{"bit":30,"label":"","description":"Size of DR3 breakpoint","pae":"","long_mode":""},{"bit":31,"label":"","description":"Size of DR3 breakpoint","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"xmm13","alt_names":["XMM13","xmm13"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ds","alt_names":["DS","ds"],"description":"Data Segment. Treated as if its base is 0 no matter what the segment descriptors in the GDT say.","reg_type":"Segment","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm12","alt_names":["XMM12","xmm12"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm6","alt_names":["YMM6","ymm6"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm6","alt_names":["ZMM6","zmm6"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm4","alt_names":["XMM4","xmm4"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm28","alt_names":["YMM28","ymm28"],"description":"A SIMD register available when AVX-512 is supported. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm8","alt_names":["ZMM8","zmm8"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm13","alt_names":["ZMM13","zmm13"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm20","alt_names":["ZMM20","zmm20"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"rflags","alt_names":["RFLAGS","rflags"],"description":"Reserved Flags Register","reg_type":"Flag","width":"Bits64","flag_info":[{"bit":0,"label":"CF","description":"Carry flag","pae":"","long_mode":""},{"bit":1,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":2,"label":"PF","description":"Parity flag","pae":"","long_mode":""},{"bit":3,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":4,"label":"AF","description":"Auxiliary Carry flag","pae":"","long_mode":""},{"bit":5,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":6,"label":"ZF","description":"Zero flag","pae":"","long_mode":""},{"bit":7,"label":"SF","description":"Sign flag","pae":"","long_mode":""},{"bit":8,"label":"TF","description":"Trap flag","pae":"","long_mode":""},{"bit":9,"label":"IF","description":"Interrupt enable flag","pae":"","long_mode":""},{"bit":10,"label":"DF","description":"Direction flag","pae":"","long_mode":""},{"bit":11,"label":"OF","description":"Overflow flag","pae":"","long_mode":""},{"bit":12,"label":"IOPL","description":"I/O privilege level","pae":"","long_mode":""},{"bit":13,"label":"IOPL","description":"I/O privilege level","pae":"","long_mode":""},{"bit":14,"label":"NT","description":"Nested task flag","pae":"","long_mode":""},{"bit":15,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":16,"label":"RF","description":"Resume flag","pae":"","long_mode":""},{"bit":17,"label":"VM","description":"Virtual 8086 mode flag","pae":"","long_mode":""},{"bit":18,"label":"AC","description":"Alignment check","pae":"","long_mode":""},{"bit":19,"label":"VIF","description":"Virtual interrupt flag","pae":"","long_mode":""},{"bit":20,"label":"VIP","description":"Virtual interrupt pending","pae":"","long_mode":""},{"bit":21,"label":"ID","description":"Able to use CPUID instruction","pae":"","long_mode":""},{"bit":22,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":23,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":24,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":25,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":26,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":27,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":28,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":29,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":30,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":31,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":32,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":33,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":34,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":35,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":36,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":37,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":38,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":39,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":40,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":41,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":42,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":43,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":44,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":45,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":46,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":47,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":48,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":49,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":50,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":51,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":52,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":53,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":54,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":55,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":56,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":57,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":58,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":59,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":60,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":61,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":62,"label":"","description":"Reserved","pae":"","long_mode":""},{"bit":63,"label":"","description":"Reserved","pae":"","long_mode":""}],"arch":"X86_64","url":null},{"name":"xmm31","alt_names":["XMM31","xmm31"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm14","alt_names":["XMM14","xmm14"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"r12","alt_names":["R12","r12"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"r13b","alt_names":["R13B","r13b"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"fs.base","alt_names":["FS.BASE","fs.base"],"description":"MSR with the address 0xC0000100, contains the base address of the FS segment register. This is commonly used for thread-pointers in user code and CPU-local pointers in kernel code. Safe to contain anything, since use of a segment does not confer additional privileges to user code.\n\nIn newer CPUs, this can also be written with the WRFSBASE instruction at any privilege level.","reg_type":"MSR","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"xmm27","alt_names":["XMM27","xmm27"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm12","alt_names":["YMM12","ymm12"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"fs","alt_names":["FS","fs"],"description":"General Purpose F Segment. MSRs can change its base.","reg_type":"Segment","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm6","alt_names":["XMM6","xmm6"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm29","alt_names":["XMM29","xmm29"],"description":"A SIMD register available when AVX-512 is supported. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm2","alt_names":["ZMM2","zmm2"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"gs.base","alt_names":["GS.BASE","gs.base"],"description":"MSR with the address 0xC0000101, contains the base address of the GS segment register. This is commonly used for thread-pointers in user code and CPU-local pointers in kernel code. Safe to contain anything, since use of a segment does not confer additional privileges to user code.\n\nIn newer CPUs, this can also be written with the WRGSBASE instruction at any privilege level.","reg_type":"MSR","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"r10","alt_names":["R10","r10"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm7","alt_names":["ZMM7","zmm7"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"ecx","alt_names":["ECX","ecx"],"description":"Counter","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"r8w","alt_names":["R8W","r8w"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm31","alt_names":["ZMM31","zmm31"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"cr2","alt_names":["CR2","cr2"],"description":"Control Register 2. This control register contains the linear (virtual) address whcih triggered a page fault, available in the page fault's interrupt hander.","reg_type":"Control","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"ymm9","alt_names":["YMM9","ymm9"],"description":"A SIMD register. This register can be used to store four 64-bit double-precision floating point numbers, or eight 32-bit single precision floating point numbers. The lower half maps onto the corresponding XMM register.","reg_type":null,"width":"Bits256","flag_info":[],"arch":"X86_64","url":null},{"name":"cx","alt_names":["CX","cx"],"description":"Counter","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"bh","alt_names":["BH","bh"],"description":"Base. Cannot be accessed when using the REX.W instruction prefix. The prefixed is added (automatically by assemblers) when an operand contains a 64-bit register","reg_type":"GeneralPurpose","width":"Upper8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"r8","alt_names":["R8","r8"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm1","alt_names":["ZMM1","zmm1"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"r14","alt_names":["R14","r14"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"zmm21","alt_names":["ZMM21","zmm21"],"description":"A SIMD register. The lower half maps onto the corresponding YMM register.","reg_type":null,"width":"Bits512","flag_info":[],"arch":"X86_64","url":null},{"name":"dil","alt_names":["DIL","dil"],"description":"Destination index for string operations","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"r11b","alt_names":["R11B","r11b"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"r10w","alt_names":["R10W","r10w"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits16","flag_info":[],"arch":"X86_64","url":null},{"name":"r15b","alt_names":["R15B","r15b"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Lower8Lower16","flag_info":[],"arch":"X86_64","url":null},{"name":"r8d","alt_names":["R8D","r8d"],"description":"General Purpose","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null},{"name":"xmm9","alt_names":["XMM9","xmm9"],"description":"A SIMD register. Under SSE, this register can be used to store four 32-bit single-precision floating point numbers. SSE2 would later expand its usage to also allow two 64-bit double-precision floating point numbers, two 64-bit integers, four 32-bit integers, eight 16-bit short integers, or sixteen 8-bit bytes or characters.","reg_type":null,"width":"Bits128","flag_info":[],"arch":"X86_64","url":null},{"name":"rsi","alt_names":["RSI","rsi"],"description":"Source index for string operations","reg_type":"GeneralPurpose","width":"Bits64","flag_info":[],"arch":"X86_64","url":null},{"name":"cr10","alt_names":["CR10","cr10"],"description":"Control Register 10. Reserved, CPU will throw a #ud exception when trying to access.","reg_type":"Control","width":null,"flag_info":[],"arch":"X86_64","url":null},{"name":"edi","alt_names":["EDI","edi"],"description":"Destination index for string operations","reg_type":"GeneralPurpose","width":"Bits32","flag_info":[],"arch":"X86_64","url":null}]