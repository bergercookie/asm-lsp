<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="RETASPPC_imm" title="RETAASPPC, RETABSPPC -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
  </docvars>
  <heading>RETAASPPC, RETABSPPC</heading>
  <desc>
    <brief>
      <para>Return from subroutine, with enhanced pointer authentication return using an immediate offset</para>
    </brief>
    <authored>
      <para>This instruction authenticates the address that is held in LR, using
SP as the first modifier,
the specified immediate subtracted from PC as the second modifier,
and the specified key, and branches to the authenticated address,
with a hint that this instruction is a subroutine return.</para>
      <para>Key A is used for <instruction>RETAASPPC</instruction>. Key B is used for <instruction>RETABSPPC</instruction>.</para>
      <para>If the authentication passes, the PE continues execution at the
target of the branch.
For information on behavior if the authentication fails, see
<xref linkend="ARMARM_MDSec.Faulting_on_pointer_authentication">Faulting on pointer authentication</xref>.</para>
      <para>The authenticated address is not written back to LR.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Integer" oneof="1" id="iclass_integer" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
      </docvars>
      <iclassintro count="2"/>
      <arch_variants>
        <arch_variant feature="FEAT_PAuth_LR" name="ARMv9.5"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.control.miscbranch.RETAASPPC_only_miscbranch" tworows="1">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" width="3" name="opc" usename="1" settings="2" psbits="xxx">
          <c>0</c>
          <c>0</c>
          <c>x</c>
        </box>
        <box hibit="20" width="16" name="imm16" usename="1">
          <c colspan="16"/>
        </box>
        <box hibit="4" width="5" name="op2" usename="1" settings="5" psbits="xxxxx">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
      </regdiagram>
      <encoding name="RETAASPPC_only_miscbranch" oneofinclass="2" oneof="2" label="RETAASPPC" bitdiffs="opc == 000">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="RETAASPPC"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="23" width="3" name="opc">
          <c/>
          <c/>
          <c>0</c>
        </box>
        <asmtemplate><text>RETAASPPC  </text><a hover="Is the program label whose address is to be calculated. Its negative offset from the address of this instruction, a multiple of 4 in the range -262140 to 0, is encoded as an unsigned value in the &quot;imm16&quot; field as &amp;lt;label&amp;gt;/4." link="imm16_offset">&lt;label&gt;</a></asmtemplate>
      </encoding>
      <encoding name="RETABSPPC_only_miscbranch" oneofinclass="2" oneof="2" label="RETABSPPC" bitdiffs="opc == 001">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="RETABSPPC"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="23" width="3" name="opc">
          <c/>
          <c/>
          <c>1</c>
        </box>
        <asmtemplate><text>RETABSPPC  </text><a hover="Is the program label whose address is to be calculated. Its negative offset from the address of this instruction, a multiple of 4 in the range -262140 to 0, is encoded as an unsigned value in the &quot;imm16&quot; field as &amp;lt;label&amp;gt;/4." link="imm16_offset">&lt;label&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.control.miscbranch.RETAASPPC_only_miscbranch" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_PAuth_LR) then UNDEFINED;

constant boolean use_key_a = opc&lt;0&gt; == '0';
constant bits(64) offset = <a link="impl-shared.ZeroExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) ZeroExtend(bits(M) x, integer N)">ZeroExtend</a>(imm16:'00', 64);
constant boolean auth_then_branch = TRUE;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="RETAASPPC_only_miscbranch, RETABSPPC_only_miscbranch" symboldefcount="1">
      <symbol link="imm16_offset">&lt;label&gt;</symbol>
      <account encodedin="imm16">
        <intro>
          <para>Is the program label whose address is to be calculated. Its negative offset from the address of this instruction, a multiple of 4 in the range -262140 to 0, is encoded as an unsigned value in the "imm16" field as &lt;label&gt;/4.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.control.miscbranch.RETAASPPC_only_miscbranch" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="GCSInstruction" file="shared_pseudocode.xml" hover="enumeration GCSInstruction { GCSInstType_PRET, GCSInstType_POPM, GCSInstType_PRETAA, GCSInstType_PRETAB, GCSInstType_SS1, GCSInstType_SS2, GCSInstType_POPCX, GCSInstType_POPX }">GCSInstruction</a> inst_type;
bits(64) target = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[30, 64];

constant bits(64) modifier = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(64) SP[]">SP</a>[];
constant bits(64) modifier2 = PC64 - offset;

if use_key_a then
    target = <a link="impl-aarch64.AuthIA2.4" file="shared_pseudocode.xml" hover="function: bits(64) AuthIA2(bits(64) x, bits(64) y, bits(64) z, boolean is_combined)">AuthIA2</a>(target, modifier, modifier2, auth_then_branch);
else
    target = <a link="impl-aarch64.AuthIB2.4" file="shared_pseudocode.xml" hover="function: bits(64) AuthIB2(bits(64) x, bits(64) y, bits(64) z, boolean is_combined)">AuthIB2</a>(target, modifier, modifier2, auth_then_branch);

if IsFeatureImplemented(FEAT_GCS) &amp;&amp; <a link="impl-aarch64.GCSPCREnabled.1" file="shared_pseudocode.xml" hover="function: boolean GCSPCREnabled(bits(2) el)">GCSPCREnabled</a>(PSTATE.EL) then
    inst_type = if use_key_a then <a link="GCSInstType_PRETAA" file="shared_pseudocode.xml" hover="enumeration GCSInstruction { GCSInstType_PRET, GCSInstType_POPM, GCSInstType_PRETAA, GCSInstType_PRETAB, GCSInstType_SS1, GCSInstType_SS2, GCSInstType_POPCX, GCSInstType_POPX }">GCSInstType_PRETAA</a> else <a link="GCSInstType_PRETAB" file="shared_pseudocode.xml" hover="enumeration GCSInstruction { GCSInstType_PRET, GCSInstType_POPM, GCSInstType_PRETAA, GCSInstType_PRETAB, GCSInstType_SS1, GCSInstType_SS2, GCSInstType_POPCX, GCSInstType_POPX }">GCSInstType_PRETAB</a>;
    target = <a link="impl-aarch64.LoadCheckGCSRecord.2" file="shared_pseudocode.xml" hover="function: bits(64) LoadCheckGCSRecord(bits(64) vaddress, GCSInstruction gcsinst_type)">LoadCheckGCSRecord</a>(target, inst_type);
    <a link="impl-aarch64.SetCurrentGCSPointer.1" file="shared_pseudocode.xml" hover="function: SetCurrentGCSPointer(bits(64) ptr)">SetCurrentGCSPointer</a>(<a link="impl-aarch64.GetCurrentGCSPointer.0" file="shared_pseudocode.xml" hover="function: bits(64) GetCurrentGCSPointer()">GetCurrentGCSPointer</a>() + 8);

// Value in BTypeNext will be used to set PSTATE.BTYPE
BTypeNext = '00';

constant boolean branch_conditional = FALSE;
<a link="impl-shared.BranchTo.3" file="shared_pseudocode.xml" hover="function: BranchTo(bits(N) target, BranchType branch_type, boolean branch_conditional)">BranchTo</a>(target, <a link="BranchType_RET" file="shared_pseudocode.xml" hover="enumeration BranchType { BranchType_DIRCALL, BranchType_INDCALL, BranchType_ERET, BranchType_DBGEXIT, BranchType_RET, BranchType_DIR, BranchType_INDIR, BranchType_EXCEPTION, BranchType_TMFAIL, BranchType_RESET, BranchType_UNKNOWN}">BranchType_RET</a>, branch_conditional);</pstext></ps>
  </ps_section>
</instructionsection>
