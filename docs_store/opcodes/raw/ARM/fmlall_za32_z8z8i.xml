<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2024 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="fmlall_za32_z8z8i" title="FMLALL (multiple and indexed vector)" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="FMLALL" />
  </docvars>
  <heading>FMLALL (multiple and indexed vector)</heading>
  <desc>
    <brief>Multi-vector 8-bit floating-point multiply-add long-long by indexed element to single-precision</brief>
    <description>
      <para>This 8-bit floating-point multiply-add long long instruction widens all 8-bit floating-point elements in the one, two, or four first source vectors and the indexed element of the second source vector to single-precision format and multiplies the corresponding elements. The intermediate products are scaled by 2<sup>-UInt(FPMR.LSCALE)</sup> before being destructively added without intermediate rounding to the overlapping 32-bit single-precision elements of the ZA quad-vector groups.</para>
      <para>The 8-bit floating-point elements within the second source vector are specified using a 4-bit immediate index which selects the same element position within each 128-bit vector segment.</para>
      <para>The quad-vector group within all of, each half of, or each quarter of the ZA array is selected by the sum of the vector select register and offset range, modulo all, half, or quarter the number of ZA array vectors.</para>
      <para>The <arm-defined-word>vector group</arm-defined-word> symbol, <syntax>VGx2</syntax> or <syntax>VGx4</syntax>, indicates that the ZA operand consists of two or four ZA quad-vector groups respectively. The <arm-defined-word>vector group</arm-defined-word> symbol is preferred for disassembly, but optional in assembler source code.</para>
      <para>The 8-bit floating-point encoding format for the elements of the first source vector and the second source vector is selected by <asm-code>FPMR.F8S1</asm-code> and <asm-code>FPMR.F8S2</asm-code> respectively.</para>
      <para>This instruction is unpredicated.</para>
    </description>
    <status>Green</status>
    <predicated>False</predicated>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <classesintro count="3">
      <txt>It has encodings from 3 classes:</txt>
      <a href="#iclass_sme_vgx1_quad">One ZA quad-vector</a>
      <txt>, </txt>
      <a href="#iclass_sme_vgx2_quad">Two ZA quad-vectors</a>
      <txt> and </txt>
      <a href="#iclass_sme_vgx4_quad">Four ZA quad-vectors</a>
    </classesintro>
    <iclass name="One ZA quad-vector" oneof="3" id="iclass_sme_vgx1_quad" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FMLALL" />
        <docvar key="sme-multireg" value="sme-vgx1-quad" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="FEAT_SME_F8F32" feature="FEAT_SME_F8F32" />
      </arch_variants>
      <regdiagram form="32" psname="FMLALL-ZA32.Z8Z8i-1">
        <box hibit="31" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="29" width="10" settings="10">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="15" name="i4h" usename="1">
          <c></c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="12" width="3" name="i4l" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" settings="1">
          <c>0</c>
        </box>
        <box hibit="2" settings="1">
          <c>0</c>
        </box>
        <box hibit="1" width="2" name="off2" usename="1">
          <c colspan="2"></c>
        </box>
      </regdiagram>
      <encoding name="fmlall_za32_z8z8i_1" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="instr-class" value="mortlach2" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FMLALL" />
          <docvar key="sme-multireg" value="sme-vgx1-quad" />
        </docvars>
        <asmtemplate><text>FMLALL  ZA.S[</text><a link="sa_wv" hover="32-bit vector select register W8-W11 (field &quot;Rv&quot;)">&lt;Wv&gt;</a><text>, </text><a link="sa_offs1" hover="First vector select offset, encoded as &quot;off2&quot; field times 4 (field off2)">&lt;offs1&gt;</a><text>:</text><a link="sa_offs4" hover="Fourth vector select offset, encoded as &quot;off2&quot; field times 4 plus 3 (field off2)">&lt;offs4&gt;</a><text>], </text><a link="sa_zn" hover="First source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.B, </text><a link="sa_zm" hover="Second source scalable vector register Z0-Z15 (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.B[</text><a link="sa_index" hover="Element index [0-15] (field &quot;i4h:i4l&quot;)">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FMLALL-ZA32.Z8Z8i-1" mylink="FMLALL-ZA32.Z8Z8i-1" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_F8F32) then UNDEFINED;
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(off2:'00');
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i4h:i4l);
constant integer nreg = 1;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Two ZA quad-vectors" oneof="3" id="iclass_sme_vgx2_quad" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FMLALL" />
        <docvar key="sme-multireg" value="sme-vgx2-quad" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="FEAT_SME_F8F32" feature="FEAT_SME_F8F32" />
      </arch_variants>
      <regdiagram form="32" psname="FMLALL-ZA32.Z8Z8i-2xi">
        <box hibit="31" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="29" width="10" settings="10">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="15" settings="1">
          <c>0</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="12" settings="1">
          <c>0</c>
        </box>
        <box hibit="11" width="2" name="i4h" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="9" width="4" name="Zn" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="5" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="3" settings="1">
          <c>0</c>
        </box>
        <box hibit="2" width="2" name="i4l" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="0" name="o1" usename="1">
          <c></c>
        </box>
      </regdiagram>
      <encoding name="fmlall_za32_z8z8i_2xi" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="instr-class" value="mortlach2" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FMLALL" />
          <docvar key="sme-multireg" value="sme-vgx2-quad" />
        </docvars>
        <asmtemplate><text>FMLALL  ZA.S[</text><a link="sa_wv" hover="32-bit vector select register W8-W11 (field &quot;Rv&quot;)">&lt;Wv&gt;</a><text>, </text><a link="sa_offs1_1" hover="First vector select offset, encoded as &quot;o1&quot; field times 4 (field o1)">&lt;offs1&gt;</a><text>:</text><a link="sa_offs4_1" hover="Fourth vector select offset, encoded as &quot;o1&quot; field times 4 plus 3 (field o1)">&lt;offs4&gt;</a><a>{, VGx2}</a><text>], </text><text>{</text><text> </text><a link="sa_zn1" hover="First scalable vector register of first source multi-vector group (field Zn)">&lt;Zn1&gt;</a><text>.B-</text><a link="sa_zn2" hover="Second scalable vector register of first source multi-vector group (field Zn)">&lt;Zn2&gt;</a><text>.B </text><text>}</text><text>, </text><a link="sa_zm" hover="Second source scalable vector register Z0-Z15 (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.B[</text><a link="sa_index" hover="Element index [0-15] (field &quot;i4h:i4l&quot;)">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FMLALL-ZA32.Z8Z8i-2xi" mylink="FMLALL-ZA32.Z8Z8i-2xi" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_F8F32) then UNDEFINED;
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(o1:'00');
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i4h:i4l);
constant integer nreg = 2;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Four ZA quad-vectors" oneof="3" id="iclass_sme_vgx4_quad" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="FMLALL" />
        <docvar key="sme-multireg" value="sme-vgx4-quad" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="FEAT_SME_F8F32" feature="FEAT_SME_F8F32" />
      </arch_variants>
      <regdiagram form="32" psname="FMLALL-ZA32.Z8Z8i-4xi">
        <box hibit="31" width="2" settings="2">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="29" width="10" settings="10">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="15" settings="1">
          <c>1</c>
        </box>
        <box hibit="14" width="2" name="Rv" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="12" settings="1">
          <c>0</c>
        </box>
        <box hibit="11" width="2" name="i4h" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="9" width="3" name="Zn" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="6" width="3" settings="3">
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="3" settings="1">
          <c>0</c>
        </box>
        <box hibit="2" width="2" name="i4l" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="0" name="o1" usename="1">
          <c></c>
        </box>
      </regdiagram>
      <encoding name="fmlall_za32_z8z8i_4xi" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="instr-class" value="mortlach2" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="FMLALL" />
          <docvar key="sme-multireg" value="sme-vgx4-quad" />
        </docvars>
        <asmtemplate><text>FMLALL  ZA.S[</text><a link="sa_wv" hover="32-bit vector select register W8-W11 (field &quot;Rv&quot;)">&lt;Wv&gt;</a><text>, </text><a link="sa_offs1_1" hover="First vector select offset, encoded as &quot;o1&quot; field times 4 (field o1)">&lt;offs1&gt;</a><text>:</text><a link="sa_offs4_1" hover="Fourth vector select offset, encoded as &quot;o1&quot; field times 4 plus 3 (field o1)">&lt;offs4&gt;</a><a>{, VGx4}</a><text>], </text><text>{</text><text> </text><a link="sa_zn1_1" hover="First scalable vector register of first source multi-vector group (field Zn)">&lt;Zn1&gt;</a><text>.B-</text><a link="sa_zn4" hover="Fourth scalable vector register of first source multi-vector group (field Zn)">&lt;Zn4&gt;</a><text>.B </text><text>}</text><text>, </text><a link="sa_zm" hover="Second source scalable vector register Z0-Z15 (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.B[</text><a link="sa_index" hover="Element index [0-15] (field &quot;i4h:i4l&quot;)">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="FMLALL-ZA32.Z8Z8i-4xi" mylink="FMLALL-ZA32.Z8Z8i-4xi" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME_F8F32) then UNDEFINED;
constant integer v = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('010':Rv);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer offset = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(o1:'00');
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i4h:i4l);
constant integer nreg = 4;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="fmlall_za32_z8z8i_1, fmlall_za32_z8z8i_2xi, fmlall_za32_z8z8i_4xi" symboldefcount="1">
      <symbol link="sa_wv">&lt;Wv&gt;</symbol>
      <account encodedin="Rv">
        <intro>
          <para>Is the 32-bit name of the vector select register W8-W11, encoded in the "Rv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_1" symboldefcount="1">
      <symbol link="sa_offs1">&lt;offs1&gt;</symbol>
      <account encodedin="off2">
        <docvars>
          <docvar key="sme-multireg" value="sme-vgx1-quad" />
        </docvars>
        <intro>
          <para>For the one ZA quad-vector variant: is the first vector select offset, encoded as "off2" field times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_2xi, fmlall_za32_z8z8i_4xi" symboldefcount="2">
      <symbol link="sa_offs1_1">&lt;offs1&gt;</symbol>
      <account encodedin="o1">
        <intro>
          <para>For the four ZA quad-vectors and two ZA quad-vectors variant: is the first vector select offset, encoded as "o1" field times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_1" symboldefcount="1">
      <symbol link="sa_offs4">&lt;offs4&gt;</symbol>
      <account encodedin="off2">
        <docvars>
          <docvar key="sme-multireg" value="sme-vgx1-quad" />
        </docvars>
        <intro>
          <para>For the one ZA quad-vector variant: is the fourth vector select offset, encoded as "off2" field times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_2xi, fmlall_za32_z8z8i_4xi" symboldefcount="2">
      <symbol link="sa_offs4_1">&lt;offs4&gt;</symbol>
      <account encodedin="o1">
        <intro>
          <para>For the four ZA quad-vectors and two ZA quad-vectors variant: is the fourth vector select offset, encoded as "o1" field times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_1" symboldefcount="1">
      <symbol link="sa_zn">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_2xi" symboldefcount="1">
      <symbol link="sa_zn1">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <docvars>
          <docvar key="sme-multireg" value="sme-vgx2-quad" />
        </docvars>
        <intro>
          <para>For the two ZA quad-vectors variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_4xi" symboldefcount="2">
      <symbol link="sa_zn1_1">&lt;Zn1&gt;</symbol>
      <account encodedin="Zn">
        <docvars>
          <docvar key="sme-multireg" value="sme-vgx4-quad" />
        </docvars>
        <intro>
          <para>For the four ZA quad-vectors variant: is the name of the first scalable vector register of the first source multi-vector group, encoded as "Zn" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_4xi" symboldefcount="1">
      <symbol link="sa_zn4">&lt;Zn4&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the first source multi-vector group, encoded as "Zn" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_2xi" symboldefcount="1">
      <symbol link="sa_zn2">&lt;Zn2&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the second scalable vector register of the first source multi-vector group, encoded as "Zn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_1, fmlall_za32_z8z8i_2xi, fmlall_za32_z8z8i_4xi" symboldefcount="1">
      <symbol link="sa_zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register Z0-Z15, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="fmlall_za32_z8z8i_1, fmlall_za32_z8z8i_2xi, fmlall_za32_z8z8i_4xi" symboldefcount="1">
      <symbol link="sa_index">&lt;index&gt;</symbol>
      <account encodedin="i4h:i4l">
        <intro>
          <para>Is the element index, in the range 0 to 15, encoded in the "i4h:i4l" fields.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="FMLALL-ZA32.Z8Z8i-1" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPMREnabled.0" file="shared_pseudocode.xml" hover="function: CheckFPMREnabled()">CheckFPMREnabled</a>();
<a link="impl-aarch64.CheckStreamingSVEAndZAEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEAndZAEnabled()">CheckStreamingSVEAndZAEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV 32;
constant integer vectors = VL DIV 8;
constant integer vstride = vectors DIV nreg;
constant integer eltspersegment = 128 DIV 32;
constant bits(32) vbase = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[v, 32];
integer vec = (<a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(vbase) + offset) MOD vstride;
bits(VL) result;
vec = vec - (vec MOD 4);

for r = 0 to nreg-1
    constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n+r, VL];
    constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
    for i = 0 to 3
        constant bits(VL) operand3 = <a link="impl-aarch64.ZAvector.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) ZAvector[integer index, integer width]">ZAvector</a>[vec + i, VL];
        for e = 0 to elements-1
            constant integer segmentbase = e - (e MOD eltspersegment);
            constant integer s = 4 * segmentbase + index;
            constant bits(8) element1 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 4 * e + i, 8];
            constant bits(8) element2 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, s, 8];
            constant bits(32) element3 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, e, 32];
            <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, 32] = <a link="impl-shared.FP8MulAddFP.5" file="shared_pseudocode.xml" hover="function: bits(M) FP8MulAddFP(bits(M) addend, bits(N) op1, bits(N) op2, FPCR_Type fpcr, FPMR_Type fpmr)">FP8MulAddFP</a>(element3, element1, element2, FPCR, FPMR);
        <a link="impl-aarch64.ZAvector.write.2" file="shared_pseudocode.xml" hover="accessor: ZAvector[integer index, integer width] = bits(width) value">ZAvector</a>[vec + i, VL] = result;
    vec = vec + vstride;</pstext>
    </ps>
  </ps_section>
</instructionsection>
