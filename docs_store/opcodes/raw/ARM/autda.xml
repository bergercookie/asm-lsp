<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="AUTDA" title="AUTDA, AUTDZA -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
  </docvars>
  <heading>AUTDA, AUTDZA</heading>
  <desc>
    <brief>
      <para>Authenticate data address, using key A</para>
    </brief>
    <authored>
      <para>This instruction authenticates a data address, using a modifier and key A.</para>
      <para>The address is in the general-purpose register that is specified by
<syntax>&lt;Xd&gt;</syntax>.</para>
      <para>The modifier is:</para>
      <list type="unordered">
        <listitem>
          <content>In the general-purpose register or stack pointer that is specified
  by <syntax>&lt;Xn|SP&gt;</syntax>, for <instruction>AUTDA</instruction>.</content>
        </listitem>
        <listitem>
          <content>The value zero, for <instruction>AUTDZA</instruction>.</content>
        </listitem>
      </list>
      <para>If the authentication passes, the upper bits of the address are
restored to enable subsequent use of the address.
For information on behavior if the authentication fails, see
<xref linkend="ARMARM_MDSec.Faulting_on_pointer_authentication">Faulting on pointer authentication</xref>.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Integer" oneof="1" id="iclass_integer" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
      </docvars>
      <iclassintro count="2"/>
      <arch_variants>
        <arch_variant feature="FEAT_PAuth" name="ARMv8.3"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.dpreg.dp_1src.AUTDA_64P_dp_1src" tworows="1">
        <box hibit="31" name="sf" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="30" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="29" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="28" width="8" settings="8">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="opcode2" usename="1" settings="5" psbits="xxxxx">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="13" width="1" name="Z" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="12" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="AUTDA_64P_dp_1src" oneofinclass="2" oneof="2" label="AUTDA" bitdiffs="Z == 0">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="AUTDA"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="13" width="1" name="Z">
          <c>0</c>
        </box>
        <asmtemplate><text>AUTDA  </text><a hover="Is the 64-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="XdOrXZR__6">&lt;Xd&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose source register or stack pointer, encoded in the &quot;Rn&quot; field." link="XnSP_option__7">&lt;Xn|SP&gt;</a></asmtemplate>
      </encoding>
      <encoding name="AUTDZA_64Z_dp_1src" oneofinclass="2" oneof="2" label="AUTDZA" bitdiffs="Z == 1 &amp;&amp; Rn == 11111">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="AUTDZA"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="13" width="1" name="Z">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>AUTDZA  </text><a hover="Is the 64-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="XdOrXZR__6">&lt;Xd&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.dpreg.dp_1src.AUTDA_64P_dp_1src" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_PAuth) then UNDEFINED;
if Z == '1' &amp;&amp; Rn != '11111' then UNDEFINED;
constant boolean auth_combined = FALSE;

constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);

constant boolean source_is_sp = Z == '0' &amp;&amp; n == 31;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="AUTDA_64P_dp_1src, AUTDZA_64Z_dp_1src" symboldefcount="1">
      <symbol link="XdOrXZR__6">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="AUTDA_64P_dp_1src" symboldefcount="1">
      <symbol link="XnSP_option__7">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose source register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.dpreg.dp_1src.AUTDA_64P_dp_1src" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">if source_is_sp then
    <a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[d, 64] = AuthDA(<a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[d, 64], <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(64) SP[]">SP</a>[], auth_combined);
else
    <a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[d, 64] = AuthDA(<a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[d, 64], <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, 64], auth_combined);
   </pstext></ps>
  </ps_section>
</instructionsection>
