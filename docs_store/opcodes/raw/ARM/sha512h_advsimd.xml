<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="SHA512H_advsimd" title="SHA512H -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="advsimd"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="SHA512H"/>
  </docvars>
  <heading>SHA512H</heading>
  <desc>
    <brief>
      <para>SHA512 hash update part 1</para>
    </brief>
    <authored>
      <para>This instruction takes the values from the three 128-bit source SIMD&amp;FP
registers and produces a 128-bit output value that combines the sigma1 and chi
functions of two iterations of the SHA512 computation. It returns this value to the
destination SIMD&amp;FP register.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1:</para>
    <list type="unordered">
      <listitem>
        <content>The execution time of this instruction is independent of:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
      <listitem>
        <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
    </list>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Advanced SIMD" oneof="1" id="iclass_advanced_simd" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="advsimd"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SHA512H"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_SHA512" name="ARMv8.2"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.simd_dp.cryptosha512_3.SHA512H_QQV_cryptosha512_3" tworows="1">
        <box hibit="31" width="11" settings="11">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="14" name="O" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="13" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="11" width="2" name="opcode" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="SHA512H_QQV_cryptosha512_3" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SHA512H"/>
          <docvar key="instr-class" value="advsimd"/>
        </docvars>
        <asmtemplate><text>SHA512H  </text><a hover="Is the 128-bit name of the SIMD&amp;amp;FP source and destination register, encoded in the &quot;Rd&quot; field." link="Qd__2">&lt;Qd&gt;</a><text>, </text><a hover="Is the 128-bit name of the second SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Qn">&lt;Qn&gt;</a><text>, </text><a hover="Is the name of the third SIMD&amp;amp;FP source register, encoded in the &quot;Rm&quot; field." link="Vm__7">&lt;Vm&gt;</a><text>.2D</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.simd_dp.cryptosha512_3.SHA512H_QQV_cryptosha512_3" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SHA512) then UNDEFINED;
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="SHA512H_QQV_cryptosha512_3" symboldefcount="1">
      <symbol link="Qd__2">&lt;Qd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 128-bit name of the SIMD&amp;FP source and destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SHA512H_QQV_cryptosha512_3" symboldefcount="1">
      <symbol link="Qn">&lt;Qn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 128-bit name of the second SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SHA512H_QQV_cryptosha512_3" symboldefcount="1">
      <symbol link="Vm__7">&lt;Vm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the name of the third SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.simd_dp.cryptosha512_3.SHA512H_QQV_cryptosha512_3" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="AArch64.CheckFPAdvSIMDEnabled.0" file="shared_pseudocode.xml" hover="function: AArch64.CheckFPAdvSIMDEnabled()">AArch64.CheckFPAdvSIMDEnabled</a>();

bits(128) Vtmp;
bits(64)  MSigma1;
bits(64)  tmp;
constant bits(128) x = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[n, 128];
constant bits(128) y = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[m, 128];
constant bits(128) w = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[d, 128];

MSigma1 =  <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(y&lt;127:64&gt;, 14) EOR <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(y&lt;127:64&gt;, 18) EOR <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(y&lt;127:64&gt;, 41);
Vtmp&lt;127:64&gt; =  (y&lt;127:64&gt; AND x&lt;63:0&gt;) EOR (NOT(y&lt;127:64&gt;) AND x&lt;127:64&gt;);
Vtmp&lt;127:64&gt; = (Vtmp&lt;127:64&gt; + MSigma1 +  w&lt;127:64&gt;);
tmp = Vtmp&lt;127:64&gt; + y&lt;63:0&gt;;
MSigma1 = <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(tmp, 14) EOR <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(tmp, 18) EOR <a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(tmp, 41);
Vtmp&lt;63:0&gt; = (tmp AND y&lt;127:64&gt;) EOR (NOT(tmp) AND x&lt;63:0&gt;);
Vtmp&lt;63:0&gt; = (Vtmp&lt;63:0&gt; + MSigma1 + w&lt;63:0&gt;);
<a link="impl-aarch64.V.write.2" file="shared_pseudocode.xml" hover="accessor: V[integer n, ESize width] = bits(width) value">V</a>[d, 128] =  Vtmp;</pstext></ps>
  </ps_section>
</instructionsection>
