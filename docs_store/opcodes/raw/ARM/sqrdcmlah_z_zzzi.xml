<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2024 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="sqrdcmlah_z_zzzi" title="SQRDCMLAH (indexed)" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve2" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="SQRDCMLAH" />
  </docvars>
  <heading>SQRDCMLAH (indexed)</heading>
  <desc>
    <brief>Saturating rounding doubling complex integer multiply-add high with rotate (indexed)</brief>
    <description>
      <para>Multiply without saturation the duplicated real components for rotations 0 and 180, or imaginary components for rotations 90 and 270, of the integral numbers in each 128-bit segment of the first source vector by the specified complex number in the corresponding the second source vector segment rotated by 0, 90, 180 or 270 degrees in the direction from the positive real axis towards the positive imaginary axis, when considered in polar representation.</para>
      <para>Then double and add the products to the corresponding components of the complex numbers in the addend vector. Destructively place the most significant rounded half of the results in the corresponding elements of the addend vector. Each result element is saturated to the N-bit element's signed integer range -2<sup>(N-1) </sup> to (2<sup>(N-1) </sup>)-1. This instruction is unpredicated.</para>
      <para>These transformations permit the creation of a variety of multiply-add and multiply-subtract operations on complex numbers by combining two of these instructions with the same vector operands but with rotations that are 90 degrees apart.</para>
      <para>Each complex number is represented in a vector register as an even/odd pair of elements with the real part in the even-numbered element and the imaginary part in the odd-numbered element.</para>
    </description>
    <status>Green</status>
    <predicated>False</predicated>
    <takes_movprfx>True</takes_movprfx>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_of_halfwords">16-bit</a>
      <txt> and </txt>
      <a href="#iclass_of_words">32-bit</a>
    </classesintro>
    <iclass name="16-bit" oneof="2" id="iclass_of_halfwords" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="as-structure-org" value="of-halfwords" />
        <docvar key="instr-class" value="sve2" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="SQRDCMLAH" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="SQRDCMLAH-Z.ZZZi-H" tworows="1">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" name="size&lt;1&gt;" usename="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="size&lt;0&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="i2" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="18" width="3" name="Zm" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="15" width="4" settings="4">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="11" width="2" name="rot" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Zda" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="sqrdcmlah_z_zzzi_h" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="as-structure-org" value="of-halfwords" />
          <docvar key="instr-class" value="sve2" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="SQRDCMLAH" />
        </docvars>
        <asmtemplate><text>SQRDCMLAH </text><a link="sa_zda" hover="Third source and destination scalable vector register (field &quot;Zda&quot;)">&lt;Zda&gt;</a><text>.H, </text><a link="sa_zn" hover="First source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.H, </text><a link="sa_zm" hover="Second source scalable vector register Z0-Z7 (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.H[</text><a link="sa_imm" hover="Element index [0-3] (field &quot;i2&quot;)">&lt;imm&gt;</a><text>], </text><a link="sa_const" hover="Const specifier (field &quot;rot&quot;) [#0,#90,#180,#270]">&lt;const&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="SQRDCMLAH-Z.ZZZi-H" mylink="SQRDCMLAH-Z.ZZZi-H" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then UNDEFINED;
constant integer esize = 16;
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i2);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zda);
constant integer sel_a = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(rot&lt;0&gt;);
constant integer sel_b = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(NOT(rot&lt;0&gt;));
constant boolean sub_r = (rot&lt;0&gt; != rot&lt;1&gt;);
constant boolean sub_i = (rot&lt;1&gt; == '1');</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="32-bit" oneof="2" id="iclass_of_words" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="as-structure-org" value="of-words" />
        <docvar key="instr-class" value="sve2" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="SQRDCMLAH" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="SQRDCMLAH-Z.ZZZi-S" tworows="1">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" name="size&lt;1&gt;" usename="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="22" name="size&lt;0&gt;" usename="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" name="i1" usename="1">
          <c></c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="15" width="4" settings="4">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="11" width="2" name="rot" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="9" width="5" name="Zn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Zda" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="sqrdcmlah_z_zzzi_s" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="as-structure-org" value="of-words" />
          <docvar key="instr-class" value="sve2" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="SQRDCMLAH" />
        </docvars>
        <asmtemplate><text>SQRDCMLAH </text><a link="sa_zda" hover="Third source and destination scalable vector register (field &quot;Zda&quot;)">&lt;Zda&gt;</a><text>.S, </text><a link="sa_zn" hover="First source scalable vector register (field &quot;Zn&quot;)">&lt;Zn&gt;</a><text>.S, </text><a link="sa_zm_1" hover="Second source scalable vector register Z0-Z15 (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.S[</text><a link="sa_imm_1" hover="Element index [0-1] (field &quot;i1&quot;)">&lt;imm&gt;</a><text>], </text><a link="sa_const" hover="Const specifier (field &quot;rot&quot;) [#0,#90,#180,#270]">&lt;const&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="SQRDCMLAH-Z.ZZZi-S" mylink="SQRDCMLAH-Z.ZZZi-S" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE2) &amp;&amp; !IsFeatureImplemented(FEAT_SME) then UNDEFINED;
constant integer esize = 32;
constant integer index = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(i1);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer da = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zda);
constant integer sel_a = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(rot&lt;0&gt;);
constant integer sel_b = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(NOT(rot&lt;0&gt;));
constant boolean sub_r = (rot&lt;0&gt; != rot&lt;1&gt;);
constant boolean sub_i = (rot&lt;1&gt; == '1');</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="sqrdcmlah_z_zzzi_h, sqrdcmlah_z_zzzi_s" symboldefcount="1">
      <symbol link="sa_zda">&lt;Zda&gt;</symbol>
      <account encodedin="Zda">
        <intro>
          <para>Is the name of the third source and destination scalable vector register, encoded in the "Zda" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqrdcmlah_z_zzzi_h, sqrdcmlah_z_zzzi_s" symboldefcount="1">
      <symbol link="sa_zn">&lt;Zn&gt;</symbol>
      <account encodedin="Zn">
        <intro>
          <para>Is the name of the first source scalable vector register, encoded in the "Zn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqrdcmlah_z_zzzi_h" symboldefcount="1">
      <symbol link="sa_zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <docvars>
          <docvar key="as-structure-org" value="of-halfwords" />
        </docvars>
        <intro>
          <para>For the 16-bit variant: is the name of the second source scalable vector register Z0-Z7, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqrdcmlah_z_zzzi_s" symboldefcount="2">
      <symbol link="sa_zm_1">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <docvars>
          <docvar key="as-structure-org" value="of-words" />
        </docvars>
        <intro>
          <para>For the 32-bit variant: is the name of the second source scalable vector register Z0-Z15, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqrdcmlah_z_zzzi_h" symboldefcount="1">
      <symbol link="sa_imm">&lt;imm&gt;</symbol>
      <account encodedin="i2">
        <docvars>
          <docvar key="as-structure-org" value="of-halfwords" />
        </docvars>
        <intro>
          <para>For the 16-bit variant: is the element index, in the range 0 to 3, encoded in the "i2" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqrdcmlah_z_zzzi_s" symboldefcount="2">
      <symbol link="sa_imm_1">&lt;imm&gt;</symbol>
      <account encodedin="i1">
        <docvars>
          <docvar key="as-structure-org" value="of-words" />
        </docvars>
        <intro>
          <para>For the 32-bit variant: is the element index, in the range 0 to 1, encoded in the "i1" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="sqrdcmlah_z_zzzi_h, sqrdcmlah_z_zzzi_s" symboldefcount="1">
      <symbol link="sa_const">&lt;const&gt;</symbol>
      <definition encodedin="rot">
        <intro>Is the const specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">rot</entry>
                <entry class="symbol">&lt;const&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">#0</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">#90</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">#180</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">#270</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="SQRDCMLAH-Z.ZZZi-H" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckSVEEnabled()">CheckSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer PL = VL DIV 8;
constant integer pairs = VL DIV (2 * esize);
constant integer pairspersegment = 128 DIV (2 * esize);
constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[n, VL];
constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
constant bits(VL) operand3 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[da, VL];
bits(VL) result;

integer res_r, res_i;

for p = 0 to pairs-1
    constant integer segmentbase = p - (p MOD pairspersegment);
    constant integer s = segmentbase + index;
    constant integer elt1_a = <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 2 * p + sel_a, esize]);
    constant integer elt2_a = <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 2 * s + sel_a, esize]);
    constant integer elt2_b = <a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 2 * s + sel_b, esize]);
    constant bits(esize) elt3_r = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, 2 * p + 0, esize];
    constant bits(esize) elt3_i = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, 2 * p + 1, esize];
    constant integer product_r =  elt1_a * elt2_a;
    constant integer product_i =  elt1_a * elt2_b;
    if sub_r then
        res_r = (<a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(elt3_r) &lt;&lt; esize) - 2 * product_r;
    else
        res_r = (<a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(elt3_r) &lt;&lt; esize) + 2 * product_r;
    res_r = (res_r + (1 &lt;&lt; (esize-1))) &gt;&gt; esize;
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, 2 * p + 0, esize] = <a link="impl-aarch32.SignedSat.2" file="shared_pseudocode.xml" hover="function: bits(N) SignedSat(integer i, integer N)">SignedSat</a>(res_r, esize);
    if sub_i then
        res_i = (<a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(elt3_i) &lt;&lt; esize) - 2 * product_i;
    else
        res_i = (<a link="impl-shared.SInt.1" file="shared_pseudocode.xml" hover="function: integer SInt(bits(N) x)">SInt</a>(elt3_i) &lt;&lt; esize) + 2 * product_i;
    res_i = (res_i + (1 &lt;&lt; (esize-1))) &gt;&gt; esize;
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, 2 * p + 1, esize] = <a link="impl-aarch32.SignedSat.2" file="shared_pseudocode.xml" hover="function: bits(N) SignedSat(integer i, integer N)">SignedSat</a>(res_i, esize);

<a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[da, VL] = result;</pstext>
    </ps>
  </ps_section>
</instructionsection>
