<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="BFDOT_advsimd_elt" title="BFDOT (by element) -- A64" type="instruction">
  <docvars>
    <docvar key="advsimd-reguse" value="2reg-element"/>
    <docvar key="instr-class" value="advsimd"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="BFDOT"/>
  </docvars>
  <heading>BFDOT (by element)</heading>
  <desc>
    <brief>
      <para>BFloat16 floating-point dot product (vector, by element)</para>
    </brief>
    <authored>
      <para>This instruction delimits the source vectors into pairs of
BFloat16 elements. The BFloat16 pair within the second source
vector is specified using an immediate index. The index range
is from 0 to 3 inclusive.</para>
      <para>If FEAT_EBF16 is not implemented or <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.EBF is 0,
this instruction:</para>
      <list type="unordered">
        <listitem>
          <content>Performs an unfused sum-of-products of each pair of adjacent
  BFloat16 elements in the first source vector with the specified
  pair of elements in the second source vector. The intermediate
  single-precision products are rounded before they are summed,
  and the intermediate sum is rounded before accumulation into
  the single-precision destination element that overlaps with
  the corresponding pair of BFloat16 elements in the first source
  vector.</content>
        </listitem>
        <listitem>
          <content>Uses the non-IEEE 754 Round-to-Odd rounding mode, which forces bit 0
  of an inexact result to 1, and rounds an overflow to an
  appropriately signed Infinity.</content>
        </listitem>
        <listitem>
          <content>Flushes denormalized inputs and results to zero, as if
  <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.{FZ, FIZ} is {1, 1}.</content>
        </listitem>
        <listitem>
          <content>Disables alternative floating point behaviors, as if
  <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.AH is 0.</content>
        </listitem>
      </list>
      <para>If FEAT_EBF16 is implemented and <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.EBF is 1,
then this instruction:</para>
      <list type="unordered">
        <listitem>
          <content>Performs a fused sum-of-products of each pair of adjacent
  BFloat16 elements in the first source vector with the specified
  pair of elements in the second source vector. The intermediate
  single-precision products are not rounded before they are summed,
  but the intermediate sum is rounded before accumulation into
  the single-precision destination element that overlaps with the
  corresponding pair of BFloat16 elements in the first source vector.</content>
        </listitem>
        <listitem>
          <content>Follows all other floating-point behaviors that apply to
  single-precision arithmetic, as governed by <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.RMode,
  <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.FZ, <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.AH, and
  <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.FIZ.</content>
        </listitem>
      </list>
      <para>Irrespective of FEAT_EBF16 and <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.EBF, this instruction:</para>
      <list type="unordered">
        <listitem>
          <content>Does not modify the cumulative <register_link id="AArch64-fpsr.xml" state="AArch64">FPSR</register_link>
  exception bits (IDC, IXC, UFC, OFC, DZC, and IOC).</content>
        </listitem>
        <listitem>
          <content>Disables trapped floating-point exceptions, as if the
  <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link> trap enable bits
  (IDE, IXE, UFE, OFE, DZE, and IOE) are all zero.</content>
        </listitem>
        <listitem>
          <content>Generates only the default NaN, as if <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.DN
  is 1.</content>
        </listitem>
      </list>
      <para><register_link id="AArch64-id_aa64isar1_el1.xml" state="AArch64">ID_AA64ISAR1_EL1</register_link>.BF16 indicates whether this instruction is supported.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Vector" oneof="1" id="iclass_vector" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="advsimd-reguse" value="2reg-element"/>
        <docvar key="instr-class" value="advsimd"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="BFDOT"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_BF16" name="ARMv8.6"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.simd_dp.asimdelem.BFDOT_asimdelem_E" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" width="1" name="Q" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="29" name="U" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="21" width="1" name="L" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="20" width="1" name="M" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="19" width="4" name="Rm" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="15" width="4" name="opcode" usename="1" settings="4" psbits="xxxx">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="11" width="1" name="H" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="10" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="BFDOT_asimdelem_E" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="BFDOT"/>
          <docvar key="advsimd-reguse" value="2reg-element"/>
          <docvar key="instr-class" value="advsimd"/>
        </docvars>
        <asmtemplate><text>BFDOT  </text><a hover="Is the name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Vd">&lt;Vd&gt;</a><text>.</text><a hover="Is an arrangement specifier, " link="Ta_option__6">&lt;Ta&gt;</a><text>, </text><a hover="Is the name of the first SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Vn__2">&lt;Vn&gt;</a><text>.</text><a hover="Is an arrangement specifier, " link="Tb_option__8">&lt;Tb&gt;</a><text>, </text><a hover="Is the name of the second SIMD&amp;amp;FP source register, encoded in the &quot;M:Rm&quot; fields." link="M_Rm__2">&lt;Vm&gt;</a><text>.2H[</text><a hover="Is the immediate index of a pair of 16-bit elements in the range 0 to 3, encoded in the &quot;H:L&quot; fields." link="H_L__2">&lt;index&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.simd_dp.asimdelem.BFDOT_asimdelem_E" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_BF16) then UNDEFINED;
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(M:Rm);
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
constant integer i = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(H:L);
constant integer datasize = 64 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Q);
constant integer elements = datasize DIV 32;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="BFDOT_asimdelem_E" symboldefcount="1">
      <symbol link="Vd">&lt;Vd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFDOT_asimdelem_E" symboldefcount="1">
      <symbol link="Ta_option__6">&lt;Ta&gt;</symbol>
      <definition encodedin="Q">
        <intro>Is an arrangement specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">Q</entry>
                <entry class="symbol">&lt;Ta&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">2S</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">4S</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="BFDOT_asimdelem_E" symboldefcount="1">
      <symbol link="Vn__2">&lt;Vn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFDOT_asimdelem_E" symboldefcount="1">
      <symbol link="Tb_option__8">&lt;Tb&gt;</symbol>
      <definition encodedin="Q">
        <intro>Is an arrangement specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">Q</entry>
                <entry class="symbol">&lt;Tb&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">4H</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">8H</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="BFDOT_asimdelem_E" symboldefcount="1">
      <symbol link="M_Rm__2">&lt;Vm&gt;</symbol>
      <account encodedin="M:Rm">
        <intro>
          <para>Is the name of the second SIMD&amp;FP source register, encoded in the "M:Rm" fields.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFDOT_asimdelem_E" symboldefcount="1">
      <symbol link="H_L__2">&lt;index&gt;</symbol>
      <account encodedin="H:L">
        <intro>
          <para>Is the immediate index of a pair of 16-bit elements in the range 0 to 3, encoded in the "H:L" fields.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.simd_dp.asimdelem.BFDOT_asimdelem_E" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPAdvSIMDEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPAdvSIMDEnabled64()">CheckFPAdvSIMDEnabled64</a>();
constant bits(datasize) operand1 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[n, datasize];
constant bits(128)      operand2 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[m, 128];
constant bits(datasize) operand3 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[d, datasize];
bits(datasize) result;

for e = 0 to elements-1
    constant bits(16) elt1_a = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 2 * e + 0, 16];
    constant bits(16) elt1_b = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, 2 * e + 1, 16];
    constant bits(16) elt2_a = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 2 * i + 0, 16];
    constant bits(16) elt2_b = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, 2 * i + 1, 16];

    constant bits(32) sum = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand3, e, 32];
    <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, e, 32] = <a link="impl-shared.BFDotAdd.6" file="shared_pseudocode.xml" hover="function: bits(N) BFDotAdd(bits(N) addend, bits(N DIV 2) op1_a, bits(N DIV 2) op1_b, bits(N DIV 2) op2_a, bits(N DIV 2) op2_b, FPCR_Type fpcr_in)">BFDotAdd</a>(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR);

<a link="impl-aarch64.V.write.2" file="shared_pseudocode.xml" hover="accessor: V[integer n, ESize width] = bits(width) value">V</a>[d, datasize] = result;</pstext></ps>
  </ps_section>
</instructionsection>
