<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="TST_ANDS_log_shift" title="TST (shifted register) -- A64" type="alias">
  <docvars>
    <docvar key="alias_mnemonic" value="TST"/>
    <docvar key="cond-setting" value="S"/>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="ANDS"/>
    <docvar key="reguse" value="shifted-reg"/>
  </docvars>
  <heading>TST (shifted register)</heading>
  <desc>
    <brief>
      <para>Test (shifted register)</para>
    </brief>
    <authored>
      <para>This instruction performs a bitwise AND operation on a register value
and an optionally-shifted register value. It updates the condition flags based
on the result, and discards the result.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1:</para>
    <list type="unordered">
      <listitem>
        <content>The execution time of this instruction is independent of:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
      <listitem>
        <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
    </list>
  </operationalnotes>
  <aliasto refiform="ands_log_shift.xml" iformid="ANDS_log_shift">ANDS (shifted register)</aliasto>
  <classes>
    <iclass name="Setting the condition flags" oneof="1" id="iclass_setting_the_condition_flags" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="cond-setting" value="S"/>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="ANDS"/>
        <docvar key="reguse" value="shifted-reg"/>
      </docvars>
      <iclassintro count="2"/>
      <regdiagram form="32" psname="A64.dpreg.log_shift.ANDS_32_log_shift.TST" tworows="1">
        <box hibit="31" width="1" name="sf" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="30" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="shift" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" name="N" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="6" name="imm6" usename="1">
          <c colspan="6"/>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1" settings="5" psbits="xxxxx">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
      </regdiagram>
      <encoding name="TST_ANDS_32_log_shift" oneofinclass="2" oneof="2" label="32-bit" bitdiffs="sf == 0">
        <docvars>
          <docvar key="datatype" value="32"/>
          <docvar key="isa" value="A64"/>
          <docvar key="reguse" value="shifted-reg"/>
          <docvar key="mnemonic" value="ANDS"/>
          <docvar key="alias_mnemonic" value="TST"/>
          <docvar key="instr-class" value="general"/>
          <docvar key="cond-setting" value="S"/>
          <docvar key="datatype-reguse" value="32-shifted-reg"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <asmtemplate><text>TST  </text><a hover="Is the 32-bit name of the first general-purpose source register, encoded in the &quot;Rn&quot; field." link="WnOrWZR__3">&lt;Wn&gt;</a><text>, </text><a hover="Is the 32-bit name of the second general-purpose source register, encoded in the &quot;Rm&quot; field." link="WmOrWZR__2">&lt;Wm&gt;</a><text>{, </text><a hover="Is the optional shift to be applied to the final source, defaulting to LSL and " link="shift_option__3">&lt;shift&gt;</a><text> #</text><a hover="For the 32-bit variant: is the shift amount, in the range 0 to 31, defaulting to 0 and encoded in the &quot;imm6&quot; field." link="amount__5">&lt;amount&gt;</a><text>}</text></asmtemplate>
        <equivalent_to>
          <asmtemplate><a href="ands_log_shift.xml#ANDS_32_log_shift">ANDS</a><text>  WZR, </text><a hover="Is the 32-bit name of the first general-purpose source register, encoded in the &quot;Rn&quot; field." href="ands_log_shift.xml#WnOrWZR__3">&lt;Wn&gt;</a><text>, </text><a hover="Is the 32-bit name of the second general-purpose source register, encoded in the &quot;Rm&quot; field." href="ands_log_shift.xml#WmOrWZR__2">&lt;Wm&gt;</a><text>{, </text><a hover="Is the optional shift to be applied to the final source, defaulting to LSL and " href="ands_log_shift.xml#shift_option__3">&lt;shift&gt;</a><text> #</text><a hover="For the 32-bit variant: is the shift amount, in the range 0 to 31, defaulting to 0 and encoded in the &quot;imm6&quot; field." href="ands_log_shift.xml#amount__5">&lt;amount&gt;</a><text>}</text></asmtemplate>
          <aliascond>Unconditionally</aliascond>
        </equivalent_to>
      </encoding>
      <encoding name="TST_ANDS_64_log_shift" oneofinclass="2" oneof="2" label="64-bit" bitdiffs="sf == 1">
        <docvars>
          <docvar key="datatype" value="64"/>
          <docvar key="isa" value="A64"/>
          <docvar key="reguse" value="shifted-reg"/>
          <docvar key="mnemonic" value="ANDS"/>
          <docvar key="alias_mnemonic" value="TST"/>
          <docvar key="instr-class" value="general"/>
          <docvar key="cond-setting" value="S"/>
          <docvar key="datatype-reguse" value="64-shifted-reg"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <asmtemplate><text>TST  </text><a hover="Is the 64-bit name of the first general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__12">&lt;Xn&gt;</a><text>, </text><a hover="Is the 64-bit name of the second general-purpose source register, encoded in the &quot;Rm&quot; field." link="XmOrXZR__4">&lt;Xm&gt;</a><text>{, </text><a hover="Is the optional shift to be applied to the final source, defaulting to LSL and " link="shift_option__3">&lt;shift&gt;</a><text> #</text><a hover="For the 64-bit variant: is the shift amount, in the range 0 to 63, defaulting to 0 and encoded in the &quot;imm6&quot; field," link="amount__7">&lt;amount&gt;</a><text>}</text></asmtemplate>
        <equivalent_to>
          <asmtemplate><a href="ands_log_shift.xml#ANDS_64_log_shift">ANDS</a><text>  XZR, </text><a hover="Is the 64-bit name of the first general-purpose source register, encoded in the &quot;Rn&quot; field." href="ands_log_shift.xml#XnOrXZR__12">&lt;Xn&gt;</a><text>, </text><a hover="Is the 64-bit name of the second general-purpose source register, encoded in the &quot;Rm&quot; field." href="ands_log_shift.xml#XmOrXZR__4">&lt;Xm&gt;</a><text>{, </text><a hover="Is the optional shift to be applied to the final source, defaulting to LSL and " href="ands_log_shift.xml#shift_option__3">&lt;shift&gt;</a><text> #</text><a hover="For the 64-bit variant: is the shift amount, in the range 0 to 63, defaulting to 0 and encoded in the &quot;imm6&quot; field," href="ands_log_shift.xml#amount__7">&lt;amount&gt;</a><text>}</text></asmtemplate>
          <aliascond>Unconditionally</aliascond>
        </equivalent_to>
      </encoding>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="TST_ANDS_32_log_shift" symboldefcount="1">
      <symbol link="WnOrWZR__3">&lt;Wn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the first general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="TST_ANDS_32_log_shift" symboldefcount="1">
      <symbol link="WmOrWZR__2">&lt;Wm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 32-bit name of the second general-purpose source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="TST_ANDS_32_log_shift, TST_ANDS_64_log_shift" symboldefcount="1">
      <symbol link="shift_option__3">&lt;shift&gt;</symbol>
      <definition encodedin="shift">
        <intro>Is the optional shift to be applied to the final source, defaulting to LSL and </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">shift</entry>
                <entry class="symbol">&lt;shift&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="symbol">LSL</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="symbol">LSR</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="symbol">ASR</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="symbol">ROR</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="TST_ANDS_32_log_shift" symboldefcount="1">
      <symbol link="amount__5">&lt;amount&gt;</symbol>
      <account encodedin="imm6">
        <intro>
          <para>For the 32-bit variant: is the shift amount, in the range 0 to 31, defaulting to 0 and encoded in the "imm6" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="TST_ANDS_64_log_shift" symboldefcount="2">
      <symbol link="amount__7">&lt;amount&gt;</symbol>
      <account encodedin="imm6">
        <intro>
          <para>For the 64-bit variant: is the shift amount, in the range 0 to 63, defaulting to 0 and encoded in the "imm6" field,</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="TST_ANDS_64_log_shift" symboldefcount="1">
      <symbol link="XnOrXZR__12">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the first general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="TST_ANDS_64_log_shift" symboldefcount="1">
      <symbol link="XmOrXZR__4">&lt;Xm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 64-bit name of the second general-purpose source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
</instructionsection>
