<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="FCCMP_float" title="FCCMP -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="float"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FCCMP"/>
  </docvars>
  <heading>FCCMP</heading>
  <desc>
    <brief>
      <para>Floating-point conditional quiet compare (scalar)</para>
    </brief>
    <authored>
      <para>This instruction compares the two SIMD&amp;FP source register values
and writes the result to the
<xref linkend="ARMARM_BEIDIGBH">PSTATE</xref>.{N, Z, C, V} flags.
If the condition does not pass, then the <xref linkend="ARMARM_BEIDIGBH">PSTATE</xref>.{N, Z, C, V} flags
are set to the flag bit specifier.</para>
      <para>This instruction raises an Invalid Operation floating-point exception if either or both of the operands
is a signaling NaN.</para>
      <para>A floating-point exception can be generated by this instruction.
Depending on the settings in <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>,
the exception results in either a flag being set in <register_link id="AArch64-fpsr.xml" state="AArch64">FPSR</register_link>,
or a synchronous exception being generated.
For more information, see
<xref linkend="ARMARM_BEIJDDAG">Floating-point exception traps</xref>.</para>
      <para>Depending on the settings in the <register_link id="AArch64-cpacr_el1.xml" state="AArch64">CPACR_EL1</register_link>,
<register_link id="AArch64-cptr_el2.xml" state="AArch64">CPTR_EL2</register_link>, and <register_link id="AArch64-cptr_el3.xml" state="AArch64">CPTR_EL3</register_link> registers,
and the current Security state and Exception level,
an attempt to execute the instruction might be trapped.</para>
    </authored>
    <affected_by_sme output="NZCV condition flags"/>
  </desc>
  <operationalnotes>
    <para>The IEEE 754 standard specifies that the result of a comparison is precisely
one of &lt;, ==, &gt; or unordered.  If either or both of the operands is a NaN, they
are unordered, and all three of (Operand1 &lt; Operand2), (Operand1 == Operand2)
and (Operand1 &gt; Operand2) are false. An unordered comparison sets the PSTATE
condition flags to N=0, Z=0, C=1, and V=1.</para>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Floating-point" oneof="1" id="iclass_floating_point" no_encodings="3" isa="A64">
      <docvars>
        <docvar key="instr-class" value="float"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FCCMP"/>
      </docvars>
      <iclassintro count="3"/>
      <regdiagram form="32" psname="A64.simd_dp.floatccmp.FCCMP_H_floatccmp" tworows="1">
        <box hibit="31" name="M" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="30" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="29" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="4" name="cond" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" name="op" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="nzcv" usename="1">
          <c colspan="4"/>
        </box>
      </regdiagram>
      <encoding name="FCCMP_H_floatccmp" oneofinclass="3" oneof="3" label="Half-precision" bitdiffs="ftype == 11">
        <docvars>
          <docvar key="datatype" value="half"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FCCMP"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <arch_variants>
          <arch_variant feature="FEAT_FP16" name="ARMv8.2"/>
        </arch_variants>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>FCCMP  </text><a hover="Is the 16-bit name of the first SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Hn">&lt;Hn&gt;</a><text>, </text><a hover="Is the 16-bit name of the second SIMD&amp;amp;FP source register, encoded in the &quot;Rm&quot; field." link="Hm">&lt;Hm&gt;</a><text>, #</text><a hover="Is the flag bit specifier, an immediate in the range 0 to 15, giving the alternative state for the 4-bit NZCV condition flags, encoded in the &quot;nzcv&quot; field." link="nzcv">&lt;nzcv&gt;</a><text>, </text><a hover="Is one of the standard conditions, encoded in the standard way, and " link="cond_option">&lt;cond&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FCCMP_S_floatccmp" oneofinclass="3" oneof="3" label="Single-precision" bitdiffs="ftype == 00">
        <docvars>
          <docvar key="datatype" value="single"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FCCMP"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>0</c>
        </box>
        <asmtemplate><text>FCCMP  </text><a hover="Is the 32-bit name of the first SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Sn__5">&lt;Sn&gt;</a><text>, </text><a hover="Is the 32-bit name of the second SIMD&amp;amp;FP source register, encoded in the &quot;Rm&quot; field." link="Sm">&lt;Sm&gt;</a><text>, #</text><a hover="Is the flag bit specifier, an immediate in the range 0 to 15, giving the alternative state for the 4-bit NZCV condition flags, encoded in the &quot;nzcv&quot; field." link="nzcv">&lt;nzcv&gt;</a><text>, </text><a hover="Is one of the standard conditions, encoded in the standard way, and " link="cond_option">&lt;cond&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FCCMP_D_floatccmp" oneofinclass="3" oneof="3" label="Double-precision" bitdiffs="ftype == 01">
        <docvars>
          <docvar key="datatype" value="double"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FCCMP"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>1</c>
        </box>
        <asmtemplate><text>FCCMP  </text><a hover="Is the 64-bit name of the first SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Dn__4">&lt;Dn&gt;</a><text>, </text><a hover="Is the 64-bit name of the second SIMD&amp;amp;FP source register, encoded in the &quot;Rm&quot; field." link="Dm">&lt;Dm&gt;</a><text>, #</text><a hover="Is the flag bit specifier, an immediate in the range 0 to 15, giving the alternative state for the 4-bit NZCV condition flags, encoded in the &quot;nzcv&quot; field." link="nzcv">&lt;nzcv&gt;</a><text>, </text><a hover="Is one of the standard conditions, encoded in the standard way, and " link="cond_option">&lt;cond&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.simd_dp.floatccmp.FCCMP_H_floatccmp" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if ftype == '10' || (ftype == '11' &amp;&amp; !IsFeatureImplemented(FEAT_FP16)) then UNDEFINED;

constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);
constant integer datasize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ftype EOR '10');
constant bits(4) condition = cond;
bits(4) flags = nzcv;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="FCCMP_H_floatccmp" symboldefcount="1">
      <symbol link="Hn">&lt;Hn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 16-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMP_H_floatccmp" symboldefcount="1">
      <symbol link="Hm">&lt;Hm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 16-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMP_H_floatccmp, FCCMP_S_floatccmp, FCCMP_D_floatccmp" symboldefcount="1">
      <symbol link="nzcv">&lt;nzcv&gt;</symbol>
      <account encodedin="nzcv">
        <intro>
          <para>Is the flag bit specifier, an immediate in the range 0 to 15, giving the alternative state for the 4-bit NZCV condition flags, encoded in the "nzcv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMP_H_floatccmp, FCCMP_S_floatccmp, FCCMP_D_floatccmp" symboldefcount="1">
      <symbol link="cond_option">&lt;cond&gt;</symbol>
      <definition encodedin="cond">
        <intro>Is one of the standard conditions, encoded in the standard way, and </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">cond</entry>
                <entry class="symbol">&lt;cond&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0000</entry>
                <entry class="symbol">EQ</entry>
              </row>
              <row>
                <entry class="bitfield">0001</entry>
                <entry class="symbol">NE</entry>
              </row>
              <row>
                <entry class="bitfield">0010</entry>
                <entry class="symbol">CS</entry>
              </row>
              <row>
                <entry class="bitfield">0011</entry>
                <entry class="symbol">CC</entry>
              </row>
              <row>
                <entry class="bitfield">0100</entry>
                <entry class="symbol">MI</entry>
              </row>
              <row>
                <entry class="bitfield">0101</entry>
                <entry class="symbol">PL</entry>
              </row>
              <row>
                <entry class="bitfield">0110</entry>
                <entry class="symbol">VS</entry>
              </row>
              <row>
                <entry class="bitfield">0111</entry>
                <entry class="symbol">VC</entry>
              </row>
              <row>
                <entry class="bitfield">1000</entry>
                <entry class="symbol">HI</entry>
              </row>
              <row>
                <entry class="bitfield">1001</entry>
                <entry class="symbol">LS</entry>
              </row>
              <row>
                <entry class="bitfield">1010</entry>
                <entry class="symbol">GE</entry>
              </row>
              <row>
                <entry class="bitfield">1011</entry>
                <entry class="symbol">LT</entry>
              </row>
              <row>
                <entry class="bitfield">1100</entry>
                <entry class="symbol">GT</entry>
              </row>
              <row>
                <entry class="bitfield">1101</entry>
                <entry class="symbol">LE</entry>
              </row>
              <row>
                <entry class="bitfield">1110</entry>
                <entry class="symbol">AL</entry>
              </row>
              <row>
                <entry class="bitfield">1111</entry>
                <entry class="symbol">NV</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="FCCMP_S_floatccmp" symboldefcount="1">
      <symbol link="Sn__5">&lt;Sn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMP_S_floatccmp" symboldefcount="1">
      <symbol link="Sm">&lt;Sm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 32-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMP_D_floatccmp" symboldefcount="1">
      <symbol link="Dn__4">&lt;Dn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FCCMP_D_floatccmp" symboldefcount="1">
      <symbol link="Dm">&lt;Dm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 64-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.simd_dp.floatccmp.FCCMP_H_floatccmp" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPEnabled64()">CheckFPEnabled64</a>();

constant bits(datasize) operand1 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[n, datasize];
constant bits(datasize) operand2 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[m, datasize];

if <a link="impl-shared.ConditionHolds.1" file="shared_pseudocode.xml" hover="function: boolean ConditionHolds(bits(4) cond)">ConditionHolds</a>(condition) then
    constant boolean signal_all_nans = FALSE;
    flags = <a link="impl-shared.FPCompare.4" file="shared_pseudocode.xml" hover="function: bits(4) FPCompare(bits(N) op1, bits(N) op2, boolean signal_nans, FPCR_Type fpcr)">FPCompare</a>(operand1, operand2, signal_all_nans, FPCR);

PSTATE.&lt;N,Z,C,V&gt; = flags;</pstext></ps>
  </ps_section>
</instructionsection>
