<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2024 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="prfb_i_p_bz" title="PRFB (scalar plus vector)" type="instruction">
  <docvars>
    <docvar key="instr-class" value="sve" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="PRFB" />
    <docvar key="sve-esize" value="esize-byte" />
  </docvars>
  <heading>PRFB (scalar plus vector)</heading>
  <desc>
    <brief>Gather prefetch bytes (scalar plus vector)</brief>
    <description>
      <para>Gather prefetch of bytes from the active memory addresses generated by a 64-bit scalar base plus vector index. The index values are optionally sign or zero-extended from 32 to 64 bits. Inactive addresses are not prefetched from memory.</para>
      <para>The <syntax>&lt;prfop&gt;</syntax> symbol specifies the prefetch hint as a combination of three options: access type <value>PLD</value> for load or <value>PST</value> for store; target cache level <value>L1</value>, <value>L2</value> or <value>L3</value>; temporality (<value>KEEP</value> for temporal or <value>STRM</value> for non-temporal).</para>
      <para>This instruction is illegal when executed in Streaming SVE mode, unless FEAT_SME_FA64 is implemented and enabled.</para>
    </description>
    <status>Green</status>
    <predicated>True</predicated>
    <sm_policy>SM_0_only</sm_policy>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <classesintro count="3">
      <txt>It has encodings from 3 classes:</txt>
      <a href="#iclass_off_s_x32_scaled">32-bit scaled offset</a>
      <txt>, </txt>
      <a href="#iclass_off_d_x32_scaled">32-bit unpacked scaled offset</a>
      <txt> and </txt>
      <a href="#iclass_off_d_64_scaled">64-bit scaled offset</a>
    </classesintro>
    <iclass name="32-bit scaled offset" oneof="3" id="iclass_off_s_x32_scaled" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="PRFB" />
        <docvar key="sve-esize" value="esize-byte" />
        <docvar key="sve-offset-type" value="off_s_x32_scaled" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="PRFB-I.P.BZ-S.x32.scaled" tworows="1">
        <box hibit="31" width="9" settings="9">
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="22" name="xs" usename="1">
          <c></c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" settings="1">
          <c>0</c>
        </box>
        <box hibit="14" name="msz&lt;1&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="13" name="msz&lt;0&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="prfop" usename="1">
          <c colspan="4"></c>
        </box>
      </regdiagram>
      <encoding name="prfb_i_p_bz_s_x32_scaled" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="PRFB" />
          <docvar key="sve-esize" value="esize-byte" />
          <docvar key="sve-offset-type" value="off_s_x32_scaled" />
        </docvars>
        <asmtemplate><text>PRFB    </text><a link="sa_prfop" hover="Prefetch operation specifier (field &quot;prfop&quot;) [#uimm4,PLDL1KEEP,PLDL1STRM,PLDL2KEEP,PLDL2STRM,PLDL3KEEP,PLDL3STRM,PSTL1KEEP,PSTL1STRM,PSTL2KEEP,PSTL2STRM,PSTL3KEEP,PSTL3STRM]">&lt;prfop&gt;</a><text>, </text><a link="sa_pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, </text><a link="sa_zm" hover="Offset scalable vector register (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.S, </text><a link="sa_mod" hover="Index extend and shift specifier (field &quot;xs&quot;) [SXTW,UXTW]">&lt;mod&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="PRFB-I.P.BZ-S.x32.scaled" mylink="PRFB-I.P.BZ-S.x32.scaled" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) then UNDEFINED;
constant integer esize = 32;
constant integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer level = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(prfop&lt;2:1&gt;);
constant boolean stream = (prfop&lt;0&gt; == '1');
constant <a link="PrefetchHint" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">PrefetchHint</a> pref_hint = if prfop&lt;3&gt; == '0' then <a link="Prefetch_READ" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">Prefetch_READ</a> else <a link="Prefetch_WRITE" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">Prefetch_WRITE</a>;
constant integer offs_size = 32;
constant boolean offs_unsigned = (xs == '0');
constant integer scale = 0;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="32-bit unpacked scaled offset" oneof="3" id="iclass_off_d_x32_scaled" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="PRFB" />
        <docvar key="sve-esize" value="esize-byte" />
        <docvar key="sve-offset-type" value="off_d_x32_scaled" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="PRFB-I.P.BZ-D.x32.scaled" tworows="1">
        <box hibit="31" width="9" settings="9">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="22" name="xs" usename="1">
          <c></c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" settings="1">
          <c>0</c>
        </box>
        <box hibit="14" name="msz&lt;1&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="13" name="msz&lt;0&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="prfop" usename="1">
          <c colspan="4"></c>
        </box>
      </regdiagram>
      <encoding name="prfb_i_p_bz_d_x32_scaled" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="PRFB" />
          <docvar key="sve-esize" value="esize-byte" />
          <docvar key="sve-offset-type" value="off_d_x32_scaled" />
        </docvars>
        <asmtemplate><text>PRFB    </text><a link="sa_prfop" hover="Prefetch operation specifier (field &quot;prfop&quot;) [#uimm4,PLDL1KEEP,PLDL1STRM,PLDL2KEEP,PLDL2STRM,PLDL3KEEP,PLDL3STRM,PSTL1KEEP,PSTL1STRM,PSTL2KEEP,PSTL2STRM,PSTL3KEEP,PSTL3STRM]">&lt;prfop&gt;</a><text>, </text><a link="sa_pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, </text><a link="sa_zm" hover="Offset scalable vector register (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.D, </text><a link="sa_mod" hover="Index extend and shift specifier (field &quot;xs&quot;) [SXTW,UXTW]">&lt;mod&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="PRFB-I.P.BZ-D.x32.scaled" mylink="PRFB-I.P.BZ-D.x32.scaled" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) then UNDEFINED;
constant integer esize = 64;
constant integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer level = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(prfop&lt;2:1&gt;);
constant boolean stream = (prfop&lt;0&gt; == '1');
constant <a link="PrefetchHint" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">PrefetchHint</a> pref_hint = if prfop&lt;3&gt; == '0' then <a link="Prefetch_READ" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">Prefetch_READ</a> else <a link="Prefetch_WRITE" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">Prefetch_WRITE</a>;
constant integer offs_size = 32;
constant boolean offs_unsigned = (xs == '0');
constant integer scale = 0;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="64-bit scaled offset" oneof="3" id="iclass_off_d_64_scaled" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="sve" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="PRFB" />
        <docvar key="sve-esize" value="esize-byte" />
        <docvar key="sve-offset-type" value="off_d_64_scaled" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <regdiagram form="32" psname="PRFB-I.P.BZ-D.64.scaled" tworows="1">
        <box hibit="31" width="11" settings="11">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Zm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" settings="1">
          <c>1</c>
        </box>
        <box hibit="14" name="msz&lt;1&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="13" name="msz&lt;0&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="12" width="3" name="Pg" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" settings="1">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="prfop" usename="1">
          <c colspan="4"></c>
        </box>
      </regdiagram>
      <encoding name="prfb_i_p_bz_d_64_scaled" oneofinclass="1" oneof="3" label="">
        <docvars>
          <docvar key="instr-class" value="sve" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="PRFB" />
          <docvar key="sve-esize" value="esize-byte" />
          <docvar key="sve-offset-type" value="off_d_64_scaled" />
        </docvars>
        <asmtemplate><text>PRFB    </text><a link="sa_prfop" hover="Prefetch operation specifier (field &quot;prfop&quot;) [#uimm4,PLDL1KEEP,PLDL1STRM,PLDL2KEEP,PLDL2STRM,PLDL3KEEP,PLDL3STRM,PSTL1KEEP,PSTL1STRM,PSTL2KEEP,PSTL2STRM,PSTL3KEEP,PSTL3STRM]">&lt;prfop&gt;</a><text>, </text><a link="sa_pg" hover="Governing scalable predicate register P0-P7 (field &quot;Pg&quot;)">&lt;Pg&gt;</a><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, </text><a link="sa_zm" hover="Offset scalable vector register (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.D]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="PRFB-I.P.BZ-D.64.scaled" mylink="PRFB-I.P.BZ-D.64.scaled" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SVE) then UNDEFINED;
constant integer esize = 64;
constant integer g = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Pg);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zm);
constant integer level = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(prfop&lt;2:1&gt;);
constant boolean stream = (prfop&lt;0&gt; == '1');
constant <a link="PrefetchHint" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">PrefetchHint</a> pref_hint = if prfop&lt;3&gt; == '0' then <a link="Prefetch_READ" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">Prefetch_READ</a> else <a link="Prefetch_WRITE" file="shared_pseudocode.xml" hover="enumeration PrefetchHint {Prefetch_READ, Prefetch_WRITE, Prefetch_EXEC}">Prefetch_WRITE</a>;
constant integer offs_size = 64;
constant boolean offs_unsigned = TRUE;
constant integer scale = 0;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="prfb_i_p_bz_d_64_scaled, prfb_i_p_bz_d_x32_scaled, prfb_i_p_bz_s_x32_scaled" symboldefcount="1">
      <symbol link="sa_prfop">&lt;prfop&gt;</symbol>
      <definition encodedin="prfop">
        <intro>Is the prefetch operation specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">prfop</entry>
                <entry class="symbol">&lt;prfop&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0000</entry>
                <entry class="symbol">PLDL1KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">0001</entry>
                <entry class="symbol">PLDL1STRM</entry>
              </row>
              <row>
                <entry class="bitfield">0010</entry>
                <entry class="symbol">PLDL2KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">0011</entry>
                <entry class="symbol">PLDL2STRM</entry>
              </row>
              <row>
                <entry class="bitfield">0100</entry>
                <entry class="symbol">PLDL3KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">0101</entry>
                <entry class="symbol">PLDL3STRM</entry>
              </row>
              <row>
                <entry class="bitfield">x11x</entry>
                <entry class="symbol">#uimm4</entry>
              </row>
              <row>
                <entry class="bitfield">1000</entry>
                <entry class="symbol">PSTL1KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">1001</entry>
                <entry class="symbol">PSTL1STRM</entry>
              </row>
              <row>
                <entry class="bitfield">1010</entry>
                <entry class="symbol">PSTL2KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">1011</entry>
                <entry class="symbol">PSTL2STRM</entry>
              </row>
              <row>
                <entry class="bitfield">1100</entry>
                <entry class="symbol">PSTL3KEEP</entry>
              </row>
              <row>
                <entry class="bitfield">1101</entry>
                <entry class="symbol">PSTL3STRM</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="prfb_i_p_bz_d_64_scaled, prfb_i_p_bz_d_x32_scaled, prfb_i_p_bz_s_x32_scaled" symboldefcount="1">
      <symbol link="sa_pg">&lt;Pg&gt;</symbol>
      <account encodedin="Pg">
        <intro>
          <para>Is the name of the governing scalable predicate register P0-P7, encoded in the "Pg" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="prfb_i_p_bz_d_64_scaled, prfb_i_p_bz_d_x32_scaled, prfb_i_p_bz_s_x32_scaled" symboldefcount="1">
      <symbol link="sa_xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="prfb_i_p_bz_d_64_scaled, prfb_i_p_bz_d_x32_scaled, prfb_i_p_bz_s_x32_scaled" symboldefcount="1">
      <symbol link="sa_zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the offset scalable vector register, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="prfb_i_p_bz_d_x32_scaled, prfb_i_p_bz_s_x32_scaled" symboldefcount="1">
      <symbol link="sa_mod">&lt;mod&gt;</symbol>
      <definition encodedin="xs">
        <intro>Is the index extend and shift specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">xs</entry>
                <entry class="symbol">&lt;mod&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">UXTW</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">SXTW</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="PRFB-I.P.BZ-S.x32.scaled" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckNonStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckNonStreamingSVEEnabled()">CheckNonStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer PL = VL DIV 8;
constant integer elements = VL DIV esize;
constant bits(PL) mask = <a link="impl-aarch64.P.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) P[integer n, integer width]">P</a>[g, PL];
bits(64) base;
bits(VL) offset;

if <a link="impl-aarch64.AnyActiveElement.2" file="shared_pseudocode.xml" hover="function: boolean AnyActiveElement(bits(N) mask, integer esize)">AnyActiveElement</a>(mask, esize) then
    base = if n == 31 then <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(64) SP[]">SP</a>[] else <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, 64];
    offset = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];

for e = 0 to elements-1
    if <a link="impl-aarch64.ActivePredicateElement.3" file="shared_pseudocode.xml" hover="function: boolean ActivePredicateElement(bits(N) pred, integer e, integer esize)">ActivePredicateElement</a>(mask, e, esize) then
        constant integer off = <a link="impl-shared.Int.2" file="shared_pseudocode.xml" hover="function: integer Int(bits(N) x, boolean unsigned)">Int</a>(<a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[offset, e, esize]&lt;offs_size-1:0&gt;, offs_unsigned);
        constant bits(64) addr = base + (off &lt;&lt; scale);
        <a link="impl-shared.Hint_Prefetch.4" file="shared_pseudocode.xml" hover="function: Hint_Prefetch(bits(64) address, PrefetchHint hint, integer target, boolean stream)">Hint_Prefetch</a>(addr, pref_hint, level, stream);</pstext>
    </ps>
  </ps_section>
</instructionsection>
