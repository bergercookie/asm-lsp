<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="FMAX_float" title="FMAX (scalar) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="float"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FMAX"/>
  </docvars>
  <heading>FMAX (scalar)</heading>
  <desc>
    <brief>
      <para>Floating-point maximum (scalar)</para>
    </brief>
    <authored>
      <para>This instruction compares the two source SIMD&amp;FP registers,
and writes the larger of the two floating-point values to the
destination SIMD&amp;FP register.</para>
      <para>When <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.AH is 0,
the behavior is as follows:</para>
      <list type="unordered">
        <listitem>
          <content>Negative zero compares less than positive zero.</content>
        </listitem>
        <listitem>
          <content>When <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.DN is 0,
  if either value is a NaN, the result is a quiet NaN.</content>
        </listitem>
        <listitem>
          <content>When <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.DN is 1,
  if either value is a NaN, the result is Default NaN.</content>
        </listitem>
      </list>
      <para>When <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.AH is 1,
the behavior is as follows:</para>
      <list type="unordered">
        <listitem>
          <content>If both values are zeros, regardless of the sign of either
  zero, the result is the second value.</content>
        </listitem>
        <listitem>
          <content>If either value is a NaN, regardless of the value of
  <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>.DN, the result is the second value.</content>
        </listitem>
      </list>
      <para>This instruction can generate a floating-point exception.
Depending on the settings in <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>,
the exception results in either a flag being set in <register_link id="AArch64-fpsr.xml" state="AArch64">FPSR</register_link>,
or a synchronous exception being generated.
For more information, see
<xref linkend="ARMARM_BEIJDDAG">Floating-point exception traps</xref>.</para>
      <para>Depending on the settings in the <register_link id="AArch64-cpacr_el1.xml" state="AArch64">CPACR_EL1</register_link>,
<register_link id="AArch64-cptr_el2.xml" state="AArch64">CPTR_EL2</register_link>, and <register_link id="AArch64-cptr_el3.xml" state="AArch64">CPTR_EL3</register_link> registers,
and the current Security state and Exception level,
an attempt to execute the instruction might be trapped.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Floating-point" oneof="1" id="iclass_floating_point" no_encodings="3" isa="A64">
      <docvars>
        <docvar key="instr-class" value="float"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FMAX"/>
      </docvars>
      <iclassintro count="3"/>
      <regdiagram form="32" psname="A64.simd_dp.floatdp2.FMAX_H_floatdp2" tworows="1">
        <box hibit="31" name="M" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="30" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="29" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="2" settings="2">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="13" width="2" name="op" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="FMAX_H_floatdp2" oneofinclass="3" oneof="3" label="Half-precision" bitdiffs="ftype == 11">
        <docvars>
          <docvar key="datatype" value="half"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMAX"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <arch_variants>
          <arch_variant feature="FEAT_FP16" name="ARMv8.2"/>
        </arch_variants>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>FMAX  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Hd">&lt;Hd&gt;</a><text>, </text><a hover="Is the 16-bit name of the first SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Hn">&lt;Hn&gt;</a><text>, </text><a hover="Is the 16-bit name of the second SIMD&amp;amp;FP source register, encoded in the &quot;Rm&quot; field." link="Hm">&lt;Hm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMAX_S_floatdp2" oneofinclass="3" oneof="3" label="Single-precision" bitdiffs="ftype == 00">
        <docvars>
          <docvar key="datatype" value="single"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMAX"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>0</c>
        </box>
        <asmtemplate><text>FMAX  </text><a hover="Is the 32-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Sd">&lt;Sd&gt;</a><text>, </text><a hover="Is the 32-bit name of the first SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Sn__5">&lt;Sn&gt;</a><text>, </text><a hover="Is the 32-bit name of the second SIMD&amp;amp;FP source register, encoded in the &quot;Rm&quot; field." link="Sm">&lt;Sm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMAX_D_floatdp2" oneofinclass="3" oneof="3" label="Double-precision" bitdiffs="ftype == 01">
        <docvars>
          <docvar key="datatype" value="double"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMAX"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>1</c>
        </box>
        <asmtemplate><text>FMAX  </text><a hover="Is the 64-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Dd">&lt;Dd&gt;</a><text>, </text><a hover="Is the 64-bit name of the first SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Dn__4">&lt;Dn&gt;</a><text>, </text><a hover="Is the 64-bit name of the second SIMD&amp;amp;FP source register, encoded in the &quot;Rm&quot; field." link="Dm">&lt;Dm&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.simd_dp.floatdp2.FMAX_H_floatdp2" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if ftype == '10' || (ftype == '11' &amp;&amp; !IsFeatureImplemented(FEAT_FP16)) then UNDEFINED;

constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);

constant integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ftype EOR '10');</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="FMAX_H_floatdp2" symboldefcount="1">
      <symbol link="Hd">&lt;Hd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 16-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMAX_H_floatdp2" symboldefcount="1">
      <symbol link="Hn">&lt;Hn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 16-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMAX_H_floatdp2" symboldefcount="1">
      <symbol link="Hm">&lt;Hm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 16-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMAX_S_floatdp2" symboldefcount="1">
      <symbol link="Sd">&lt;Sd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMAX_S_floatdp2" symboldefcount="1">
      <symbol link="Sn__5">&lt;Sn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMAX_S_floatdp2" symboldefcount="1">
      <symbol link="Sm">&lt;Sm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 32-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMAX_D_floatdp2" symboldefcount="1">
      <symbol link="Dd">&lt;Dd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMAX_D_floatdp2" symboldefcount="1">
      <symbol link="Dn__4">&lt;Dn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMAX_D_floatdp2" symboldefcount="1">
      <symbol link="Dm">&lt;Dm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 64-bit name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.simd_dp.floatdp2.FMAX_H_floatdp2" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPEnabled64()">CheckFPEnabled64</a>();
constant bits(esize) operand1 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[n, esize];
constant bits(esize) operand2 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[m, esize];

bits(128) result = if <a link="impl-shared.IsMerging.1" file="shared_pseudocode.xml" hover="function: boolean IsMerging(FPCR_Type fpcr)">IsMerging</a>(FPCR) then <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[n, 128] else <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(128);

<a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[result, 0, esize] = <a link="impl-shared.FPMax.3" file="shared_pseudocode.xml" hover="function: bits(N) FPMax(bits(N) op1, bits(N) op2, FPCR_Type fpcr)">FPMax</a>(operand1, operand2, FPCR);

<a link="impl-aarch64.V.write.2" file="shared_pseudocode.xml" hover="accessor: V[integer n, ESize width] = bits(width) value">V</a>[d, 128] = result;</pstext></ps>
  </ps_section>
</instructionsection>
