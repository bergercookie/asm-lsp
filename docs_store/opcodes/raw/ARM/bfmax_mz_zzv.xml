<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2024 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="bfmax_mz_zzv" title="BFMAX (multiple and single vector)" type="instruction">
  <docvars>
    <docvar key="instr-class" value="mortlach2" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="BFMAX" />
  </docvars>
  <heading>BFMAX (multiple and single vector)</heading>
  <desc>
    <brief>Multi-vector BFloat16 floating-point maximum by vector</brief>
    <description>
      <para>Determine the maximum of BFloat16 elements of the second source vector and the corresponding BFloat16 elements of the two or four first source vectors and destructively place the results in the corresponding elements of the two or four first source vectors.</para>
      <para>When FPCR.AH is 0, the behavior is as follows:</para>
      <list type="unordered">
        <listitem>
          <content>Negative zero compares less than positive zero.</content>
        </listitem>
        <listitem>
          <content>When FPCR.DN is 0, if either element is a NaN, the result is a quiet NaN.</content>
        </listitem>
        <listitem>
          <content>When FPCR.DN is 1, if either element is a NaN, the result is Default NaN.</content>
        </listitem>
      </list>
      <para>When FPCR.AH is 1, the behavior is as follows:</para>
      <list type="unordered">
        <listitem>
          <content>If both elements are zeros, regardless of the sign of either zero, the result is the second element.</content>
        </listitem>
        <listitem>
          <content>If either element is a NaN, regardless of the value of FPCR.DN, the result is the second element.</content>
        </listitem>
      </list>
      <para>This instruction follows SME2 non-widening BFloat16 numerical behaviors corresponding to instructions that place their results in two or four SVE Z vectors.</para>
      <para>This instruction is unpredicated.</para>
      <para>ID_AA64ZFR0_EL1.B16B16 indicates whether this instruction is implemented.</para>
    </description>
    <status>Green</status>
    <predicated>False</predicated>
    <sm_policy>SM_1_only</sm_policy>
  </desc>
  <alias_list howmany="0"></alias_list>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_to_2reg">Two registers</a>
      <txt> and </txt>
      <a href="#iclass_to_4reg">Four registers</a>
    </classesintro>
    <iclass name="Two registers" oneof="2" id="iclass_to_2reg" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2" />
        <docvar key="isa" value="A64" />
        <docvar key="ldstruct-regcount" value="to-2reg" />
        <docvar key="mnemonic" value="BFMAX" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="FEAT_SVE_B16B16" feature="FEAT_SVE_B16B16" />
      </arch_variants>
      <regdiagram form="32" psname="BFMAX-MZ.ZZV-2x1" tworows="1">
        <box hibit="31" width="8" settings="8">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="size&lt;1&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="22" name="size&lt;0&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="15" width="6" settings="6">
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="4" settings="4">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="5" name="op" settings="1">
          <c>0</c>
        </box>
        <box hibit="4" width="4" name="Zdn" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="0" name="o2" settings="1">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="bfmax_mz_zzv_2x1" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="instr-class" value="mortlach2" />
          <docvar key="isa" value="A64" />
          <docvar key="ldstruct-regcount" value="to-2reg" />
          <docvar key="mnemonic" value="BFMAX" />
        </docvars>
        <asmtemplate><text>BFMAX   </text><text>{</text><text> </text><a link="sa_zdn1" hover="First scalable vector register of destination and first source multi-vector group (field Zdn)">&lt;Zdn1&gt;</a><text>.H-</text><a link="sa_zdn2" hover="Second scalable vector register of destination and first source multi-vector group (field Zdn)">&lt;Zdn2&gt;</a><text>.H </text><text>}</text><text>, </text><text>{</text><text> </text><a link="sa_zdn1" hover="First scalable vector register of destination and first source multi-vector group (field Zdn)">&lt;Zdn1&gt;</a><text>.H-</text><a link="sa_zdn2" hover="Second scalable vector register of destination and first source multi-vector group (field Zdn)">&lt;Zdn2&gt;</a><text>.H </text><text>}</text><text>, </text><a link="sa_zm" hover="Second source scalable vector register Z0-Z15 (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.H</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="BFMAX-MZ.ZZV-2x1" mylink="BFMAX-MZ.ZZV-2x1" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) || !IsFeatureImplemented(FEAT_SVE_B16B16) then UNDEFINED;
constant integer dn = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zdn:'0');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer nreg = 2;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Four registers" oneof="2" id="iclass_to_4reg" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="mortlach2" />
        <docvar key="isa" value="A64" />
        <docvar key="ldstruct-regcount" value="to-4reg" />
        <docvar key="mnemonic" value="BFMAX" />
      </docvars>
      <iclassintro count="1"></iclassintro>
      <arch_variants>
        <arch_variant name="FEAT_SVE_B16B16" feature="FEAT_SVE_B16B16" />
      </arch_variants>
      <regdiagram form="32" psname="BFMAX-MZ.ZZV-4x1" tworows="1">
        <box hibit="31" width="8" settings="8">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="23" name="size&lt;1&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="22" name="size&lt;0&gt;" usename="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="21" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="19" width="4" name="Zm" usename="1">
          <c colspan="4"></c>
        </box>
        <box hibit="15" width="6" settings="6">
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="4" settings="4">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="5" name="op" settings="1">
          <c>0</c>
        </box>
        <box hibit="4" width="3" name="Zdn" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="0" name="o2" settings="1">
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="bfmax_mz_zzv_4x1" oneofinclass="1" oneof="2" label="">
        <docvars>
          <docvar key="instr-class" value="mortlach2" />
          <docvar key="isa" value="A64" />
          <docvar key="ldstruct-regcount" value="to-4reg" />
          <docvar key="mnemonic" value="BFMAX" />
        </docvars>
        <asmtemplate><text>BFMAX   </text><text>{</text><text> </text><a link="sa_zdn1_1" hover="First scalable vector register of destination and first source multi-vector group (field Zdn)">&lt;Zdn1&gt;</a><text>.H-</text><a link="sa_zdn4" hover="Fourth scalable vector register of destination and first source multi-vector group (field Zdn)">&lt;Zdn4&gt;</a><text>.H </text><text>}</text><text>, </text><text>{</text><text> </text><a link="sa_zdn1_1" hover="First scalable vector register of destination and first source multi-vector group (field Zdn)">&lt;Zdn1&gt;</a><text>.H-</text><a link="sa_zdn4" hover="Fourth scalable vector register of destination and first source multi-vector group (field Zdn)">&lt;Zdn4&gt;</a><text>.H </text><text>}</text><text>, </text><a link="sa_zm" hover="Second source scalable vector register Z0-Z15 (field &quot;Zm&quot;)">&lt;Zm&gt;</a><text>.H</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="BFMAX-MZ.ZZV-4x1" mylink="BFMAX-MZ.ZZV-4x1" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_SME2) || !IsFeatureImplemented(FEAT_SVE_B16B16) then UNDEFINED;
constant integer dn = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Zdn:'00');
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>('0':Zm);
constant integer nreg = 4;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="bfmax_mz_zzv_2x1" symboldefcount="1">
      <symbol link="sa_zdn1">&lt;Zdn1&gt;</symbol>
      <account encodedin="Zdn">
        <docvars>
          <docvar key="ldstruct-regcount" value="to-2reg" />
        </docvars>
        <intro>
          <para>For the two registers variant: is the name of the first scalable vector register of the destination and first source multi-vector group, encoded as "Zdn" times 2.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmax_mz_zzv_4x1" symboldefcount="2">
      <symbol link="sa_zdn1_1">&lt;Zdn1&gt;</symbol>
      <account encodedin="Zdn">
        <docvars>
          <docvar key="ldstruct-regcount" value="to-4reg" />
        </docvars>
        <intro>
          <para>For the four registers variant: is the name of the first scalable vector register of the destination and first source multi-vector group, encoded as "Zdn" times 4.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmax_mz_zzv_4x1" symboldefcount="1">
      <symbol link="sa_zdn4">&lt;Zdn4&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>Is the name of the fourth scalable vector register of the destination and first source multi-vector group, encoded as "Zdn" times 4 plus 3.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmax_mz_zzv_2x1" symboldefcount="1">
      <symbol link="sa_zdn2">&lt;Zdn2&gt;</symbol>
      <account encodedin="Zdn">
        <intro>
          <para>Is the name of the second scalable vector register of the destination and first source multi-vector group, encoded as "Zdn" times 2 plus 1.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="bfmax_mz_zzv_2x1, bfmax_mz_zzv_4x1" symboldefcount="1">
      <symbol link="sa_zm">&lt;Zm&gt;</symbol>
      <account encodedin="Zm">
        <intro>
          <para>Is the name of the second source scalable vector register Z0-Z15, encoded in the "Zm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="BFMAX-MZ.ZZV-2x1" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckStreamingSVEEnabled.0" file="shared_pseudocode.xml" hover="function: CheckStreamingSVEEnabled()">CheckStreamingSVEEnabled</a>();
constant integer VL = <a link="impl-aarch64.CurrentVL.read.none" file="shared_pseudocode.xml" hover="accessor: VecLen CurrentVL">CurrentVL</a>;
constant integer elements = VL DIV 16;
array [0..3] of bits(VL) results;

for r = 0 to nreg-1
    constant bits(VL) operand1 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[dn+r, VL];
    constant bits(VL) operand2 = <a link="impl-aarch64.Z.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) Z[integer n, integer width]">Z</a>[m, VL];
    for e = 0 to elements-1
        constant bits(16) element1 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand1, e, 16];
        constant bits(16) element2 = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[operand2, e, 16];
        <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[results[r], e, 16] = <a link="impl-shared.BFMax.3" file="shared_pseudocode.xml" hover="function: bits(N) BFMax(bits(N) op1, bits(N) op2, FPCR_Type fpcr)">BFMax</a>(element1, element2, FPCR);

for r = 0 to nreg-1
    <a link="impl-aarch64.Z.write.2" file="shared_pseudocode.xml" hover="accessor: Z[integer n, integer width] = bits(width) value">Z</a>[dn+r, VL] = results[r];</pstext>
    </ps>
  </ps_section>
</instructionsection>
