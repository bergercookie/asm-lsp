<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="FMOV_float_gen" title="FMOV (general) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="float"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="FMOV"/>
  </docvars>
  <heading>FMOV (general)</heading>
  <desc>
    <brief>
      <para>Floating-point move to or from general-purpose register without conversion</para>
    </brief>
    <authored>
      <para>This instruction transfers the contents of a SIMD&amp;FP register
to a general-purpose register, or the contents of a general-purpose
register to a SIMD&amp;FP register.</para>
      <para>Depending on the settings in the <register_link id="AArch64-cpacr_el1.xml" state="AArch64">CPACR_EL1</register_link>,
<register_link id="AArch64-cptr_el2.xml" state="AArch64">CPTR_EL2</register_link>, and <register_link id="AArch64-cptr_el3.xml" state="AArch64">CPTR_EL3</register_link> registers,
and the current Security state and Exception level,
an attempt to execute the instruction might be trapped.</para>
    </authored>
    <affected_by_sme output="general-purpose register"/>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Floating-point" oneof="1" id="iclass_floating_point" no_encodings="10" isa="A64">
      <docvars>
        <docvar key="instr-class" value="float"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="FMOV"/>
      </docvars>
      <iclassintro count="10"/>
      <regdiagram form="32" psname="A64.simd_dp.float2int.FMOV_32H_float2int" tworows="1">
        <box hibit="31" width="1" name="sf" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="30" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="29" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="rmode" usename="1" settings="1" psbits="xx">
          <c>0</c>
          <c>x</c>
        </box>
        <box hibit="18" width="3" name="opcode" usename="1" settings="2" psbits="xxx">
          <c>1</c>
          <c>1</c>
          <c>x</c>
        </box>
        <box hibit="15" width="6" settings="6">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="FMOV_32H_float2int" oneofinclass="10" oneof="10" label="Half-precision to 32-bit" bitdiffs="sf == 0 &amp;&amp; ftype == 11 &amp;&amp; rmode == 00 &amp;&amp; opcode == 110">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="half-to-32"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <arch_variants>
          <arch_variant feature="FEAT_FP16" name="ARMv8.2"/>
        </arch_variants>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>0</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 32-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="WdOrWZR">&lt;Wd&gt;</a><text>, </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Hn__2">&lt;Hn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_64H_float2int" oneofinclass="10" oneof="10" label="Half-precision to 64-bit" bitdiffs="sf == 1 &amp;&amp; ftype == 11 &amp;&amp; rmode == 00 &amp;&amp; opcode == 110">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="half-to-64"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <arch_variants>
          <arch_variant feature="FEAT_FP16" name="ARMv8.2"/>
        </arch_variants>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>0</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 64-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="XdOrXZR__6">&lt;Xd&gt;</a><text>, </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Hn__2">&lt;Hn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_H32_float2int" oneofinclass="10" oneof="10" label="32-bit to half-precision" bitdiffs="sf == 0 &amp;&amp; ftype == 11 &amp;&amp; rmode == 00 &amp;&amp; opcode == 111">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="32-to-half"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <arch_variants>
          <arch_variant feature="FEAT_FP16" name="ARMv8.2"/>
        </arch_variants>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>1</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Hd">&lt;Hd&gt;</a><text>, </text><a hover="Is the 32-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="WnOrWZR">&lt;Wn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_S32_float2int" oneofinclass="10" oneof="10" label="32-bit to single-precision" bitdiffs="sf == 0 &amp;&amp; ftype == 00 &amp;&amp; rmode == 00 &amp;&amp; opcode == 111">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="32-to-single"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>1</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 32-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Sd">&lt;Sd&gt;</a><text>, </text><a hover="Is the 32-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="WnOrWZR">&lt;Wn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_32S_float2int" oneofinclass="10" oneof="10" label="Single-precision to 32-bit" bitdiffs="sf == 0 &amp;&amp; ftype == 00 &amp;&amp; rmode == 00 &amp;&amp; opcode == 110">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="single-to-32"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>0</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 32-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="WdOrWZR">&lt;Wd&gt;</a><text>, </text><a hover="Is the 32-bit name of the SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Sn">&lt;Sn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_H64_float2int" oneofinclass="10" oneof="10" label="64-bit to half-precision" bitdiffs="sf == 1 &amp;&amp; ftype == 11 &amp;&amp; rmode == 00 &amp;&amp; opcode == 111">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="64-to-half"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <arch_variants>
          <arch_variant feature="FEAT_FP16" name="ARMv8.2"/>
        </arch_variants>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>1</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Hd">&lt;Hd&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__11">&lt;Xn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_D64_float2int" oneofinclass="10" oneof="10" label="64-bit to double-precision" bitdiffs="sf == 1 &amp;&amp; ftype == 01 &amp;&amp; rmode == 00 &amp;&amp; opcode == 111">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="64-to-double"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>1</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 64-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Dd">&lt;Dd&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__11">&lt;Xn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_V64I_float2int" oneofinclass="10" oneof="10" label="64-bit to top half of 128-bit" bitdiffs="sf == 1 &amp;&amp; ftype == 10 &amp;&amp; rmode == 01 &amp;&amp; opcode == 111">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="64-to-quadhi"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>1</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>1</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Vd">&lt;Vd&gt;</a><text>.D[1], </text><a hover="Is the 64-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__11">&lt;Xn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_64D_float2int" oneofinclass="10" oneof="10" label="Double-precision to 64-bit" bitdiffs="sf == 1 &amp;&amp; ftype == 01 &amp;&amp; rmode == 00 &amp;&amp; opcode == 110">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="double-to-64"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>0</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 64-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="XdOrXZR__6">&lt;Xd&gt;</a><text>, </text><a hover="Is the 64-bit name of the SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Dn">&lt;Dn&gt;</a></asmtemplate>
      </encoding>
      <encoding name="FMOV_64VX_float2int" oneofinclass="10" oneof="10" label="Top half of 128-bit to 64-bit" bitdiffs="sf == 1 &amp;&amp; ftype == 10 &amp;&amp; rmode == 01 &amp;&amp; opcode == 110">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="FMOV"/>
          <docvar key="convert-type" value="quadhi-to-64"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="20" width="2" name="rmode">
          <c/>
          <c>1</c>
        </box>
        <box hibit="18" width="3" name="opcode">
          <c/>
          <c/>
          <c>0</c>
        </box>
        <asmtemplate><text>FMOV  </text><a hover="Is the 64-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="XdOrXZR__6">&lt;Xd&gt;</a><text>, </text><a hover="Is the name of the SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Vn">&lt;Vn&gt;</a><text>.D[1]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.simd_dp.float2int.FMOV_32H_float2int" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if ftype == '10' &amp;&amp; opcode&lt;2:1&gt;:rmode != '11 01' then UNDEFINED;
if ftype == '11' &amp;&amp; !IsFeatureImplemented(FEAT_FP16) then UNDEFINED;

constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);

constant integer intsize = 32 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(sf);
constant integer fltsize = if ftype == '10' then 64 else (8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ftype EOR '10'));
constant integer part = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(rmode&lt;0&gt;);
<a link="FPConvOp" file="shared_pseudocode.xml" hover="enumeration FPConvOp    {FPConvOp_CVT_FtoI, FPConvOp_CVT_ItoF, FPConvOp_MOV_FtoI, FPConvOp_MOV_ItoF, FPConvOp_CVT_FtoI_JS }">FPConvOp</a> op;

case opcode&lt;2:1&gt;:rmode of
    when '11 00'        // FMOV
        if fltsize != 16 &amp;&amp; fltsize != intsize then UNDEFINED;
        op = if opcode&lt;0&gt; == '1' then <a link="FPConvOp_MOV_ItoF" file="shared_pseudocode.xml" hover="enumeration FPConvOp    {FPConvOp_CVT_FtoI, FPConvOp_CVT_ItoF, FPConvOp_MOV_FtoI, FPConvOp_MOV_ItoF, FPConvOp_CVT_FtoI_JS }">FPConvOp_MOV_ItoF</a> else <a link="FPConvOp_MOV_FtoI" file="shared_pseudocode.xml" hover="enumeration FPConvOp    {FPConvOp_CVT_FtoI, FPConvOp_CVT_ItoF, FPConvOp_MOV_FtoI, FPConvOp_MOV_ItoF, FPConvOp_CVT_FtoI_JS }">FPConvOp_MOV_FtoI</a>;
    when '11 01'        // FMOV D[1]
        if intsize != 64 || ftype != '10' then UNDEFINED;
        op = if opcode&lt;0&gt; == '1' then <a link="FPConvOp_MOV_ItoF" file="shared_pseudocode.xml" hover="enumeration FPConvOp    {FPConvOp_CVT_FtoI, FPConvOp_CVT_ItoF, FPConvOp_MOV_FtoI, FPConvOp_MOV_ItoF, FPConvOp_CVT_FtoI_JS }">FPConvOp_MOV_ItoF</a> else <a link="FPConvOp_MOV_FtoI" file="shared_pseudocode.xml" hover="enumeration FPConvOp    {FPConvOp_CVT_FtoI, FPConvOp_CVT_ItoF, FPConvOp_MOV_FtoI, FPConvOp_MOV_ItoF, FPConvOp_CVT_FtoI_JS }">FPConvOp_MOV_FtoI</a>;
    otherwise
        Unreachable();
   </pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="FMOV_32H_float2int, FMOV_32S_float2int" symboldefcount="1">
      <symbol link="WdOrWZR">&lt;Wd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_32H_float2int, FMOV_64H_float2int" symboldefcount="1">
      <symbol link="Hn__2">&lt;Hn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 16-bit name of the SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_64H_float2int, FMOV_64D_float2int, FMOV_64VX_float2int" symboldefcount="1">
      <symbol link="XdOrXZR__6">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_H32_float2int, FMOV_H64_float2int" symboldefcount="1">
      <symbol link="Hd">&lt;Hd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 16-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_H32_float2int, FMOV_S32_float2int" symboldefcount="1">
      <symbol link="WnOrWZR">&lt;Wn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_S32_float2int" symboldefcount="1">
      <symbol link="Sd">&lt;Sd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_32S_float2int" symboldefcount="1">
      <symbol link="Sn">&lt;Sn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_H64_float2int, FMOV_D64_float2int, FMOV_V64I_float2int" symboldefcount="1">
      <symbol link="XnOrXZR__11">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_D64_float2int" symboldefcount="1">
      <symbol link="Dd">&lt;Dd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_V64I_float2int" symboldefcount="1">
      <symbol link="Vd">&lt;Vd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_64D_float2int" symboldefcount="1">
      <symbol link="Dn">&lt;Dn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="FMOV_64VX_float2int" symboldefcount="1">
      <symbol link="Vn">&lt;Vn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the name of the SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.simd_dp.float2int.FMOV_32H_float2int" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPEnabled64()">CheckFPEnabled64</a>();

bits(fltsize) fltval;
bits(intsize) intval;

case op of
    when <a link="FPConvOp_MOV_FtoI" file="shared_pseudocode.xml" hover="enumeration FPConvOp    {FPConvOp_CVT_FtoI, FPConvOp_CVT_ItoF, FPConvOp_MOV_FtoI, FPConvOp_MOV_ItoF, FPConvOp_CVT_FtoI_JS }">FPConvOp_MOV_FtoI</a>
        fltval = <a link="impl-aarch64.Vpart.read.3" file="shared_pseudocode.xml" hover="accessor: bits(width) Vpart[integer n, integer part, ESize width]">Vpart</a>[n, part, fltsize];
        <a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[d, intsize] = <a link="impl-shared.ZeroExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) ZeroExtend(bits(M) x, integer N)">ZeroExtend</a>(fltval, intsize);
    when <a link="FPConvOp_MOV_ItoF" file="shared_pseudocode.xml" hover="enumeration FPConvOp    {FPConvOp_CVT_FtoI, FPConvOp_CVT_ItoF, FPConvOp_MOV_FtoI, FPConvOp_MOV_ItoF, FPConvOp_CVT_FtoI_JS }">FPConvOp_MOV_ItoF</a>
        intval = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, intsize];
        <a link="impl-aarch64.Vpart.write.3" file="shared_pseudocode.xml" hover="accessor: Vpart[integer n, integer part, ESize width] = bits(width) value">Vpart</a>[d, part, fltsize] = intval&lt;fltsize-1:0&gt;;
    otherwise
        Unreachable();
   </pstext></ps>
  </ps_section>
</instructionsection>
