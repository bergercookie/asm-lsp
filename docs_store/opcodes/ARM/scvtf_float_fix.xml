<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="SCVTF_float_fix" title="SCVTF (scalar, fixed-point) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="float"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="SCVTF"/>
  </docvars>
  <heading>SCVTF (scalar, fixed-point)</heading>
  <desc>
    <brief>
      <para>Signed fixed-point convert to floating-point (scalar)</para>
    </brief>
    <authored>
      <para>This instruction converts the signed value
in the 32-bit or 64-bit general-purpose source register to a
floating-point value using the rounding mode that is specified by the <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>, and
writes the result to the SIMD&amp;FP destination register.</para>
      <para>A floating-point exception can be generated by this instruction.
Depending on the settings in <register_link id="AArch64-fpcr.xml" state="AArch64">FPCR</register_link>,
the exception results in either a flag being set in <register_link id="AArch64-fpsr.xml" state="AArch64">FPSR</register_link>,
or a synchronous exception being generated.
For more information, see
<xref linkend="ARMARM_BEIJDDAG">Floating-point exception traps</xref>.</para>
      <para>Depending on the settings in the <register_link id="AArch64-cpacr_el1.xml" state="AArch64">CPACR_EL1</register_link>,
<register_link id="AArch64-cptr_el2.xml" state="AArch64">CPTR_EL2</register_link>, and <register_link id="AArch64-cptr_el3.xml" state="AArch64">CPTR_EL3</register_link> registers,
and the Security state and Exception level in which the instruction is executed,
an attempt to execute the instruction might be trapped.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Floating-point" oneof="1" id="iclass_floating_point" no_encodings="6" isa="A64">
      <docvars>
        <docvar key="instr-class" value="float"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="SCVTF"/>
      </docvars>
      <iclassintro count="6"/>
      <regdiagram form="32" psname="A64.simd_dp.float2fix.SCVTF_H32_float2fix" tworows="1">
        <box hibit="31" width="1" name="sf" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="30" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="29" name="S" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="2" name="rmode" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="18" width="3" name="opcode" usename="1" settings="3" psbits="xxx">
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="15" width="6" name="scale" usename="1">
          <c colspan="6"/>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="SCVTF_H32_float2fix" oneofinclass="6" oneof="6" label="32-bit to half-precision" bitdiffs="sf == 0 &amp;&amp; ftype == 11">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SCVTF"/>
          <docvar key="convert-type" value="fix32-to-half"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <arch_variants>
          <arch_variant feature="FEAT_FP16" name="ARMv8.2"/>
        </arch_variants>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>SCVTF  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Hd">&lt;Hd&gt;</a><text>, </text><a hover="Is the 32-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="WnOrWZR">&lt;Wn&gt;</a><text>, #</text><a hover="For the 32-bit to double-precision, 32-bit to half-precision and 32-bit to single-precision variant: is the number of bits after the binary point in the fixed-point source, in the range 1 to 32, encoded as 64 minus &quot;scale&quot;." link="fbits">&lt;fbits&gt;</a></asmtemplate>
      </encoding>
      <encoding name="SCVTF_H64_float2fix" oneofinclass="6" oneof="6" label="64-bit to half-precision" bitdiffs="sf == 1 &amp;&amp; ftype == 11">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SCVTF"/>
          <docvar key="convert-type" value="fix64-to-half"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <arch_variants>
          <arch_variant feature="FEAT_FP16" name="ARMv8.2"/>
        </arch_variants>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>SCVTF  </text><a hover="Is the 16-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Hd">&lt;Hd&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__11">&lt;Xn&gt;</a><text>, #</text><a hover="For the 64-bit to double-precision, 64-bit to half-precision and 64-bit to single-precision variant: is the number of bits after the binary point in the fixed-point source, in the range 1 to 64, encoded as 64 minus &quot;scale&quot;." link="fbits__3">&lt;fbits&gt;</a></asmtemplate>
      </encoding>
      <encoding name="SCVTF_S32_float2fix" oneofinclass="6" oneof="6" label="32-bit to single-precision" bitdiffs="sf == 0 &amp;&amp; ftype == 00">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SCVTF"/>
          <docvar key="convert-type" value="fix32-to-single"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>0</c>
        </box>
        <asmtemplate><text>SCVTF  </text><a hover="Is the 32-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Sd">&lt;Sd&gt;</a><text>, </text><a hover="Is the 32-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="WnOrWZR">&lt;Wn&gt;</a><text>, #</text><a hover="For the 32-bit to double-precision, 32-bit to half-precision and 32-bit to single-precision variant: is the number of bits after the binary point in the fixed-point source, in the range 1 to 32, encoded as 64 minus &quot;scale&quot;." link="fbits">&lt;fbits&gt;</a></asmtemplate>
      </encoding>
      <encoding name="SCVTF_S64_float2fix" oneofinclass="6" oneof="6" label="64-bit to single-precision" bitdiffs="sf == 1 &amp;&amp; ftype == 00">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SCVTF"/>
          <docvar key="convert-type" value="fix64-to-single"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>0</c>
        </box>
        <asmtemplate><text>SCVTF  </text><a hover="Is the 32-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Sd">&lt;Sd&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__11">&lt;Xn&gt;</a><text>, #</text><a hover="For the 64-bit to double-precision, 64-bit to half-precision and 64-bit to single-precision variant: is the number of bits after the binary point in the fixed-point source, in the range 1 to 64, encoded as 64 minus &quot;scale&quot;." link="fbits__3">&lt;fbits&gt;</a></asmtemplate>
      </encoding>
      <encoding name="SCVTF_D32_float2fix" oneofinclass="6" oneof="6" label="32-bit to double-precision" bitdiffs="sf == 0 &amp;&amp; ftype == 01">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SCVTF"/>
          <docvar key="convert-type" value="fix32-to-double"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>1</c>
        </box>
        <asmtemplate><text>SCVTF  </text><a hover="Is the 64-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Dd">&lt;Dd&gt;</a><text>, </text><a hover="Is the 32-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="WnOrWZR">&lt;Wn&gt;</a><text>, #</text><a hover="For the 32-bit to double-precision, 32-bit to half-precision and 32-bit to single-precision variant: is the number of bits after the binary point in the fixed-point source, in the range 1 to 32, encoded as 64 minus &quot;scale&quot;." link="fbits">&lt;fbits&gt;</a></asmtemplate>
      </encoding>
      <encoding name="SCVTF_D64_float2fix" oneofinclass="6" oneof="6" label="64-bit to double-precision" bitdiffs="sf == 1 &amp;&amp; ftype == 01">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="SCVTF"/>
          <docvar key="convert-type" value="fix64-to-double"/>
          <docvar key="instr-class" value="float"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="23" width="2" name="ftype">
          <c>0</c>
          <c>1</c>
        </box>
        <asmtemplate><text>SCVTF  </text><a hover="Is the 64-bit name of the SIMD&amp;amp;FP destination register, encoded in the &quot;Rd&quot; field." link="Dd">&lt;Dd&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__11">&lt;Xn&gt;</a><text>, #</text><a hover="For the 64-bit to double-precision, 64-bit to half-precision and 64-bit to single-precision variant: is the number of bits after the binary point in the fixed-point source, in the range 1 to 64, encoded as 64 minus &quot;scale&quot;." link="fbits__3">&lt;fbits&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.simd_dp.float2fix.SCVTF_H32_float2fix" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if ftype == '10' || (ftype == '11' &amp;&amp; !IsFeatureImplemented(FEAT_FP16)) then UNDEFINED;
if sf == '0' &amp;&amp; scale&lt;5&gt; == '0' then UNDEFINED;

constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);

constant integer intsize = 32 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(sf);
constant integer decode_fltsize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(ftype EOR '10');

constant integer fracbits = 64 - <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(scale);

constant boolean unsigned = FALSE;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="SCVTF_H32_float2fix, SCVTF_H64_float2fix" symboldefcount="1">
      <symbol link="Hd">&lt;Hd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 16-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SCVTF_H32_float2fix, SCVTF_S32_float2fix, SCVTF_D32_float2fix" symboldefcount="1">
      <symbol link="WnOrWZR">&lt;Wn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SCVTF_H32_float2fix, SCVTF_S32_float2fix, SCVTF_D32_float2fix" symboldefcount="1">
      <symbol link="fbits">&lt;fbits&gt;</symbol>
      <account encodedin="scale">
        <intro>
          <para>For the 32-bit to double-precision, 32-bit to half-precision and 32-bit to single-precision variant: is the number of bits after the binary point in the fixed-point source, in the range 1 to 32, encoded as 64 minus "scale".</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SCVTF_H64_float2fix, SCVTF_S64_float2fix, SCVTF_D64_float2fix" symboldefcount="2">
      <symbol link="fbits__3">&lt;fbits&gt;</symbol>
      <account encodedin="scale">
        <intro>
          <para>For the 64-bit to double-precision, 64-bit to half-precision and 64-bit to single-precision variant: is the number of bits after the binary point in the fixed-point source, in the range 1 to 64, encoded as 64 minus "scale".</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SCVTF_H64_float2fix, SCVTF_S64_float2fix, SCVTF_D64_float2fix" symboldefcount="1">
      <symbol link="XnOrXZR__11">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SCVTF_S32_float2fix, SCVTF_S64_float2fix" symboldefcount="1">
      <symbol link="Sd">&lt;Sd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="SCVTF_D32_float2fix, SCVTF_D64_float2fix" symboldefcount="1">
      <symbol link="Dd">&lt;Dd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the SIMD&amp;FP destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.simd_dp.float2fix.SCVTF_H32_float2fix" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPEnabled64()">CheckFPEnabled64</a>();

constant boolean merge = <a link="impl-shared.IsMerging.1" file="shared_pseudocode.xml" hover="function: boolean IsMerging(FPCR_Type fpcr)">IsMerging</a>(FPCR);
constant integer fltsize = if merge then 128 else decode_fltsize;
bits(fltsize) fltval = if merge then <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[d, fltsize] else <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(fltsize);
constant bits(intsize) intval = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, intsize];
constant <a link="FPRounding" file="shared_pseudocode.xml" hover="enumeration FPRounding  {FPRounding_TIEEVEN, FPRounding_POSINF, FPRounding_NEGINF,  FPRounding_ZERO, FPRounding_TIEAWAY, FPRounding_ODD}">FPRounding</a> rounding = <a link="impl-shared.FPRoundingMode.1" file="shared_pseudocode.xml" hover="function: FPRounding FPRoundingMode(FPCR_Type fpcr)">FPRoundingMode</a>(FPCR);

<a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[fltval, 0, decode_fltsize] = FixedToFP(intval, fracbits, unsigned,
                                            FPCR, rounding, decode_fltsize);

<a link="impl-aarch64.V.write.2" file="shared_pseudocode.xml" hover="accessor: V[integer n, ESize width] = bits(width) value">V</a>[d, fltsize] = fltval;</pstext></ps>
  </ps_section>
</instructionsection>
