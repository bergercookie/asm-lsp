<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="B_cond" title="B.cond -- A64" type="instruction">
  <docvars>
    <docvar key="branch-offset" value="br19"/>
    <docvar key="compare-with" value="cmp-cond"/>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="B"/>
  </docvars>
  <heading>B.cond</heading>
  <desc>
    <brief>
      <para>Branch conditionally</para>
    </brief>
    <authored>
      <para>This instruction branches conditionally to a label at a PC-relative
offset, with a hint that this is not a subroutine call or return.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="19-bit signed PC-relative branch offset" oneof="1" id="iclass_19_bit_signed_pc_relative_branch_offset" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="branch-offset" value="br19"/>
        <docvar key="compare-with" value="cmp-cond"/>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="B"/>
      </docvars>
      <iclassintro count="1"/>
      <regdiagram form="32" psname="A64.control.condbranch.B_only_condbranch" tworows="1">
        <box hibit="31" width="8" settings="8">
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" width="19" name="imm19" usename="1">
          <c colspan="19"/>
        </box>
        <box hibit="4" name="o0" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="cond" usename="1">
          <c colspan="4"/>
        </box>
      </regdiagram>
      <encoding name="B_only_condbranch" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="B"/>
          <docvar key="branch-offset" value="br19"/>
          <docvar key="compare-with" value="cmp-cond"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <asmtemplate><text>B.</text><a hover="Is one of the standard conditions, encoded in the standard way, and " link="cond_option">&lt;cond&gt;</a><text>  </text><a hover="Is the program label to be conditionally branched to. Its offset from the address of this instruction, in the range +/-1MB, is encoded as &quot;imm19&quot; times 4." link="imm19_offset">&lt;label&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.control.condbranch.B_only_condbranch" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">constant bits(64) offset = <a link="impl-shared.SignExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) SignExtend(bits(M) x, integer N)">SignExtend</a>(imm19:'00', 64);
constant bits(4) condition = cond;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="B_only_condbranch" symboldefcount="1">
      <symbol link="cond_option">&lt;cond&gt;</symbol>
      <definition encodedin="cond">
        <intro>Is one of the standard conditions, encoded in the standard way, and </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">cond</entry>
                <entry class="symbol">&lt;cond&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0000</entry>
                <entry class="symbol">EQ</entry>
              </row>
              <row>
                <entry class="bitfield">0001</entry>
                <entry class="symbol">NE</entry>
              </row>
              <row>
                <entry class="bitfield">0010</entry>
                <entry class="symbol">CS</entry>
              </row>
              <row>
                <entry class="bitfield">0011</entry>
                <entry class="symbol">CC</entry>
              </row>
              <row>
                <entry class="bitfield">0100</entry>
                <entry class="symbol">MI</entry>
              </row>
              <row>
                <entry class="bitfield">0101</entry>
                <entry class="symbol">PL</entry>
              </row>
              <row>
                <entry class="bitfield">0110</entry>
                <entry class="symbol">VS</entry>
              </row>
              <row>
                <entry class="bitfield">0111</entry>
                <entry class="symbol">VC</entry>
              </row>
              <row>
                <entry class="bitfield">1000</entry>
                <entry class="symbol">HI</entry>
              </row>
              <row>
                <entry class="bitfield">1001</entry>
                <entry class="symbol">LS</entry>
              </row>
              <row>
                <entry class="bitfield">1010</entry>
                <entry class="symbol">GE</entry>
              </row>
              <row>
                <entry class="bitfield">1011</entry>
                <entry class="symbol">LT</entry>
              </row>
              <row>
                <entry class="bitfield">1100</entry>
                <entry class="symbol">GT</entry>
              </row>
              <row>
                <entry class="bitfield">1101</entry>
                <entry class="symbol">LE</entry>
              </row>
              <row>
                <entry class="bitfield">1110</entry>
                <entry class="symbol">AL</entry>
              </row>
              <row>
                <entry class="bitfield">1111</entry>
                <entry class="symbol">NV</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="B_only_condbranch" symboldefcount="1">
      <symbol link="imm19_offset">&lt;label&gt;</symbol>
      <account encodedin="imm19">
        <intro>
          <para>Is the program label to be conditionally branched to. Its offset from the address of this instruction, in the range +/-1MB, is encoded as "imm19" times 4.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.control.condbranch.B_only_condbranch" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">constant boolean branch_conditional = TRUE;
if <a link="impl-shared.ConditionHolds.1" file="shared_pseudocode.xml" hover="function: boolean ConditionHolds(bits(4) cond)">ConditionHolds</a>(condition) then
    <a link="impl-shared.BranchTo.3" file="shared_pseudocode.xml" hover="function: BranchTo(bits(N) target, BranchType branch_type, boolean branch_conditional)">BranchTo</a>(PC64 + offset, <a link="BranchType_DIR" file="shared_pseudocode.xml" hover="enumeration BranchType { BranchType_DIRCALL, BranchType_INDCALL, BranchType_ERET, BranchType_DBGEXIT, BranchType_RET, BranchType_DIR, BranchType_INDIR, BranchType_EXCEPTION, BranchType_TMFAIL, BranchType_RESET, BranchType_UNKNOWN}">BranchType_DIR</a>, branch_conditional);
else
    <a link="impl-shared.BranchNotTaken.2" file="shared_pseudocode.xml" hover="function: BranchNotTaken(BranchType branchtype, boolean branch_conditional)">BranchNotTaken</a>(<a link="BranchType_DIR" file="shared_pseudocode.xml" hover="enumeration BranchType { BranchType_DIRCALL, BranchType_INDCALL, BranchType_ERET, BranchType_DBGEXIT, BranchType_RET, BranchType_DIR, BranchType_INDIR, BranchType_EXCEPTION, BranchType_TMFAIL, BranchType_RESET, BranchType_UNKNOWN}">BranchType_DIR</a>, branch_conditional);
   </pstext></ps>
  </ps_section>
</instructionsection>
