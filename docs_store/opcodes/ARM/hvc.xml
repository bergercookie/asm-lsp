<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="HVC" title="HVC -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="system"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="HVC"/>
  </docvars>
  <heading>HVC</heading>
  <desc>
    <brief>
      <para>Hypervisor call</para>
    </brief>
    <authored>
      <para>This instruction causes an exception to EL2. Software executing at EL1
can use this instruction to call the hypervisor to request a
service.</para>
      <para>The <instruction>HVC</instruction> instruction is <arm-defined-word>UNDEFINED</arm-defined-word>:</para>
      <list type="unordered">
        <listitem>
          <content>When EL3 is implemented and
<register_link id="AArch64-scr_el3.xml" state="AArch64">SCR_EL3</register_link>.HCE is set to 0.</content>
        </listitem>
        <listitem>
          <content>When EL3 is not implemented and
<register_link id="AArch64-hcr_el2.xml" state="AArch64">HCR_EL2</register_link>.HCD is set to 1.</content>
        </listitem>
        <listitem>
          <content>When EL2 is not implemented.</content>
        </listitem>
        <listitem>
          <content>At EL1 if EL2 is not enabled in the current Security state.</content>
        </listitem>
        <listitem>
          <content>At EL0.</content>
        </listitem>
      </list>
      <para>On executing an <instruction>HVC</instruction> instruction, the PE records the exception
as a Hypervisor Call exception in
<xref linkend="ARMARM_ESR_ELx">ESR_ELx</xref>, using the EC value
<hexnumber>0x16</hexnumber>, and the value of the immediate argument.</para>
    </authored>
  </desc>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="System" oneof="1" id="iclass_system" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="instr-class" value="system"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="HVC"/>
      </docvars>
      <iclassintro count="1"/>
      <regdiagram form="32" psname="A64.control.exception.HVC_EX_exception" tworows="1">
        <box hibit="31" width="8" settings="8">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" width="3" name="opc" usename="1" settings="3" psbits="xxx">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="20" width="16" name="imm16" usename="1">
          <c colspan="16"/>
        </box>
        <box hibit="4" width="3" name="op2" usename="1" settings="3" psbits="xxx">
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="1" width="2" name="LL" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>0</c>
        </box>
      </regdiagram>
      <encoding name="HVC_EX_exception" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="HVC"/>
          <docvar key="instr-class" value="system"/>
        </docvars>
        <asmtemplate><text>HVC  #</text><a hover="Is a 16-bit unsigned immediate, in the range 0 to 65535, encoded in the &quot;imm16&quot; field." link="imm">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.control.exception.HVC_EX_exception" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !<a link="impl-shared.HaveEL.1" file="shared_pseudocode.xml" hover="function: boolean HaveEL(bits(2) el)">HaveEL</a>(<a link="EL2" file="shared_pseudocode.xml" hover="constant bits(2) EL2 = '10'">EL2</a>) then UNDEFINED;
constant bits(16) imm = imm16;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="HVC_EX_exception" symboldefcount="1">
      <symbol link="imm">&lt;imm&gt;</symbol>
      <account encodedin="imm16">
        <intro>
          <para>Is a 16-bit unsigned immediate, in the range 0 to 65535, encoded in the "imm16" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.control.exception.HVC_EX_exception" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">if PSTATE.EL == <a link="EL0" file="shared_pseudocode.xml" hover="constant bits(2) EL0 = '00'">EL0</a> then UNDEFINED;
if PSTATE.EL == <a link="EL1" file="shared_pseudocode.xml" hover="constant bits(2) EL1 = '01'">EL1</a> &amp;&amp; !<a link="impl-shared.EL2Enabled.0" file="shared_pseudocode.xml" hover="function: boolean EL2Enabled()">EL2Enabled</a>() then UNDEFINED;
if !<a link="impl-shared.HaveEL.1" file="shared_pseudocode.xml" hover="function: boolean HaveEL(bits(2) el)">HaveEL</a>(<a link="EL3" file="shared_pseudocode.xml" hover="constant bits(2) EL3 = '11'">EL3</a>) &amp;&amp; HCR_EL2.HCD == '1' then UNDEFINED;
if <a link="impl-shared.HaveEL.1" file="shared_pseudocode.xml" hover="function: boolean HaveEL(bits(2) el)">HaveEL</a>(<a link="EL3" file="shared_pseudocode.xml" hover="constant bits(2) EL3 = '11'">EL3</a>) &amp;&amp; SCR_EL3.HCE == '0' then UNDEFINED;

<a link="AArch64.CallHypervisor.1" file="shared_pseudocode.xml" hover="function: AArch64.CallHypervisor(bits(16) immediate)">AArch64.CallHypervisor</a>(imm);</pstext></ps>
  </ps_section>
</instructionsection>
