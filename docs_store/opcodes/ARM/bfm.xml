<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="BFM" title="BFM -- A64" type="instruction">
  <docvars>
    <docvar key="bitfield-fill" value="nofill"/>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="BFM"/>
  </docvars>
  <heading>BFM</heading>
  <desc>
    <brief>
      <para>Bitfield move</para>
    </brief>
    <authored>
      <para>This instruction is usually accessed via one of its aliases, which are
always preferred for disassembly.</para>
      <para>If <syntax>&lt;imms&gt;</syntax> is greater than or equal to <syntax>&lt;immr&gt;</syntax>,
this copies a bitfield of (<syntax>&lt;imms&gt;</syntax>-<syntax>&lt;immr&gt;</syntax>+1) bits
starting from bit position <syntax>&lt;immr&gt;</syntax> in the source register
to the least significant bits of the destination register.</para>
      <para>If <syntax>&lt;imms&gt;</syntax> is less than <syntax>&lt;immr&gt;</syntax>, this copies a
bitfield of (<syntax>&lt;imms&gt;</syntax>+1) bits from the least significant
bits of the source register to bit position
(regsize-<syntax>&lt;immr&gt;</syntax>) of the destination register, where
regsize is the destination register size of 32 or 64 bits.</para>
      <para>In both cases, the other bits of the destination register remain
unchanged.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1:</para>
    <list type="unordered">
      <listitem>
        <content>The execution time of this instruction is independent of:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
      <listitem>
        <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
    </list>
  </operationalnotes>
  <alias_list howmany="3">
    <alias_list_intro>This instruction is used by the aliases </alias_list_intro>
    <aliasref aliaspageid="BFC_BFM" aliasfile="bfc_bfm.xml" hover="Bitfield clear" punct=", ">
      <text>BFC</text>
      <aliaspref>Rn == '11111' &amp;&amp; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imms) &lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(immr)</aliaspref>
    </aliasref>
    <aliasref aliaspageid="BFI_BFM" aliasfile="bfi_bfm.xml" hover="Bitfield insert" punct=" and ">
      <text>BFI</text>
      <aliaspref>Rn != '11111' &amp;&amp; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imms) &lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(immr)</aliaspref>
    </aliasref>
    <aliasref aliaspageid="BFXIL_BFM" aliasfile="bfxil_bfm.xml" hover="Bitfield extract and insert at low end" punct=".">
      <text>BFXIL</text>
      <aliaspref>
        <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imms) &gt;= <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(immr)</aliaspref>
    </aliasref>
    <alias_list_outro>
      <text>  See </text>
      <aliastablelink/>
      <text> below for details of when each alias is preferred.</text>
    </alias_list_outro>
  </alias_list>
  <classes>
    <iclass name="Leaving other bits unchanged" oneof="1" id="iclass_leaving_other_bits_unchanged" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="bitfield-fill" value="nofill"/>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="BFM"/>
      </docvars>
      <iclassintro count="2"/>
      <regdiagram form="32" psname="A64.dpimm.bitfield.BFM_32M_bitfield" tworows="1">
        <box hibit="31" width="1" name="sf" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="30" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="28" width="6" settings="6">
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="22" width="1" name="N" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="21" width="6" name="immr" usename="1">
          <c colspan="6"/>
        </box>
        <box hibit="15" width="6" name="imms" usename="1">
          <c colspan="6"/>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="BFM_32M_bitfield" oneofinclass="2" oneof="2" label="32-bit" bitdiffs="sf == 0 &amp;&amp; N == 0">
        <docvars>
          <docvar key="datatype" value="32"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="BFM"/>
          <docvar key="bitfield-fill" value="nofill"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="22" width="1" name="N">
          <c>0</c>
        </box>
        <asmtemplate><text>BFM  </text><a hover="Is the 32-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="WdOrWZR">&lt;Wd&gt;</a><text>, </text><a hover="Is the 32-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="WnOrWZR">&lt;Wn&gt;</a><text>, #</text><a hover="For the 32-bit variant: is the right rotate amount, in the range 0 to 31, encoded in the &quot;immr&quot; field." link="immr">&lt;immr&gt;</a><text>, #</text><a hover="For the 32-bit variant: is the leftmost bit number to be moved from the source, in the range 0 to 31, encoded in the &quot;imms&quot; field." link="imms">&lt;imms&gt;</a></asmtemplate>
      </encoding>
      <encoding name="BFM_64M_bitfield" oneofinclass="2" oneof="2" label="64-bit" bitdiffs="sf == 1 &amp;&amp; N == 1">
        <docvars>
          <docvar key="datatype" value="64"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="BFM"/>
          <docvar key="bitfield-fill" value="nofill"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <box hibit="22" width="1" name="N">
          <c>1</c>
        </box>
        <asmtemplate><text>BFM  </text><a hover="Is the 64-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="XdOrXZR__6">&lt;Xd&gt;</a><text>, </text><a hover="Is the 64-bit name of the general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__11">&lt;Xn&gt;</a><text>, #</text><a hover="For the 64-bit variant: is the right rotate amount, in the range 0 to 63, encoded in the &quot;immr&quot; field." link="immr__2">&lt;immr&gt;</a><text>, #</text><a hover="For the 64-bit variant: is the leftmost bit number to be moved from the source, in the range 0 to 63, encoded in the &quot;imms&quot; field." link="imms__2">&lt;imms&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.dpimm.bitfield.BFM_32M_bitfield" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if sf == '1' &amp;&amp; N != '1' then UNDEFINED;
if sf == '0' &amp;&amp; (N != '0' || immr&lt;5&gt; != '0' || imms&lt;5&gt; != '0') then UNDEFINED;

constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer datasize = 32 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(sf);
constant integer s = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(imms);
constant integer r = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(immr);

bits(datasize) wmask;
bits(datasize) tmask;
(wmask, tmask) = <a link="impl-aarch64.DecodeBitMasks.5" file="shared_pseudocode.xml" hover="function: (bits(M), bits(M)) DecodeBitMasks(bit immN, bits(6) imms, bits(6) immr, boolean immediate, integer M)">DecodeBitMasks</a>(N, imms, immr, FALSE, datasize);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="BFM_32M_bitfield" symboldefcount="1">
      <symbol link="WdOrWZR">&lt;Wd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFM_32M_bitfield" symboldefcount="1">
      <symbol link="WnOrWZR">&lt;Wn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFM_32M_bitfield" symboldefcount="1">
      <symbol link="immr">&lt;immr&gt;</symbol>
      <account encodedin="immr">
        <intro>
          <para>For the 32-bit variant: is the right rotate amount, in the range 0 to 31, encoded in the "immr" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFM_64M_bitfield" symboldefcount="2">
      <symbol link="immr__2">&lt;immr&gt;</symbol>
      <account encodedin="immr">
        <intro>
          <para>For the 64-bit variant: is the right rotate amount, in the range 0 to 63, encoded in the "immr" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFM_32M_bitfield" symboldefcount="1">
      <symbol link="imms">&lt;imms&gt;</symbol>
      <account encodedin="imms">
        <intro>
          <para>For the 32-bit variant: is the leftmost bit number to be moved from the source, in the range 0 to 31, encoded in the "imms" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFM_64M_bitfield" symboldefcount="2">
      <symbol link="imms__2">&lt;imms&gt;</symbol>
      <account encodedin="imms">
        <intro>
          <para>For the 64-bit variant: is the leftmost bit number to be moved from the source, in the range 0 to 63, encoded in the "imms" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFM_64M_bitfield" symboldefcount="1">
      <symbol link="XdOrXZR__6">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="BFM_64M_bitfield" symboldefcount="1">
      <symbol link="XnOrXZR__11">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <aliastablehook anchor="aliasconditions">Alias Conditions</aliastablehook>
  <ps_section howmany="1">
    <ps name="A64.dpimm.bitfield.BFM_32M_bitfield" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">constant bits(datasize) dst = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[d, datasize];
constant bits(datasize) src = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, datasize];

// Perform bitfield move on low bits
constant bits(datasize) bot = (dst AND NOT(wmask)) OR (<a link="impl-shared.ROR.2" file="shared_pseudocode.xml" hover="function: bits(N) ROR(bits(N) x, integer shift)">ROR</a>(src, r) AND wmask);

// Combine extension bits and result bits
<a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[d, datasize] = (dst AND NOT(tmask)) OR (bot AND tmask);</pstext></ps>
  </ps_section>
</instructionsection>
