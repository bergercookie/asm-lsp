<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="MOV_MOVN" title="MOV (inverted wide immediate) -- A64" type="alias">
  <docvars>
    <docvar key="alias_mnemonic" value="MOV"/>
    <docvar key="immediate-type" value="imm18-packed"/>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="MOVN"/>
  </docvars>
  <heading>MOV (inverted wide immediate)</heading>
  <desc>
    <brief>
      <para>Move (inverted wide immediate)</para>
    </brief>
    <authored>
      <para>This instruction moves an inverted 16-bit immediate
value to a register.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1:</para>
    <list type="unordered">
      <listitem>
        <content>The execution time of this instruction is independent of:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
      <listitem>
        <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
    </list>
  </operationalnotes>
  <aliasto refiform="movn.xml" iformid="MOVN">MOVN</aliasto>
  <classes>
    <iclass name="Immediate packed into 16-bit value and 2-bit shift" oneof="1" id="iclass_immediate_packed_into_16_bit_value_and_2_bit_shift" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="immediate-type" value="imm18-packed"/>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="MOVN"/>
      </docvars>
      <iclassintro count="2"/>
      <regdiagram form="32" psname="A64.dpimm.movewide.MOVN_32_movewide.MOV" tworows="1">
        <box hibit="31" width="1" name="sf" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="30" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="28" width="6" settings="6">
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="22" width="2" name="hw" usename="1">
          <c colspan="2"/>
        </box>
        <box hibit="20" width="16" name="imm16" usename="1">
          <c colspan="16"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="MOV_MOVN_32_movewide" oneofinclass="2" oneof="2" label="32-bit" bitdiffs="sf == 0 &amp;&amp; hw == 0x">
        <docvars>
          <docvar key="datatype" value="32"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MOVN"/>
          <docvar key="alias_mnemonic" value="MOV"/>
          <docvar key="immediate-type" value="imm18-packed"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="22" width="2" name="hw">
          <c>0</c>
          <c/>
        </box>
        <asmtemplate><text>MOV  </text><a hover="Is the 32-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="WdOrWZR">&lt;Wd&gt;</a><text>, #</text><a hover="For the 32-bit variant: is a 32-bit immediate, the bitwise inverse of which can be encoded in &quot;imm16:hw&quot;, but excluding 0xffff0000 and 0x0000ffff" link="hw_imm16">&lt;imm&gt;</a></asmtemplate>
        <equivalent_to>
          <asmtemplate><a href="movn.xml#MOVN_32_movewide">MOVN</a><text>  </text><a hover="Is the 32-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." href="movn.xml#WdOrWZR">&lt;Wd&gt;</a><text>, #&lt;imm16&gt;, LSL  #</text><a hover="For the 32-bit variant: is the amount by which to shift the immediate left, either 0 (the default) or 16, encoded in the &quot;hw&quot; field as &amp;lt;shift&amp;gt;/16." href="movn.xml#shift__7">&lt;shift&gt;</a></asmtemplate>
          <aliascond>!(<a link="impl-shared.IsZero.1" file="shared_pseudocode.xml" hover="function: boolean IsZero(bits(N) x)">IsZero</a>(imm16) &amp;&amp; hw != '00') &amp;&amp; !<a link="impl-shared.IsOnes.1" file="shared_pseudocode.xml" hover="function: boolean IsOnes(bits(N) x)">IsOnes</a>(imm16)</aliascond>
        </equivalent_to>
      </encoding>
      <encoding name="MOV_MOVN_64_movewide" oneofinclass="2" oneof="2" label="64-bit" bitdiffs="sf == 1">
        <docvars>
          <docvar key="datatype" value="64"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="MOVN"/>
          <docvar key="alias_mnemonic" value="MOV"/>
          <docvar key="immediate-type" value="imm18-packed"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <asmtemplate><text>MOV  </text><a hover="Is the 64-bit name of the general-purpose destination register, encoded in the &quot;Rd&quot; field." link="XdOrXZR__6">&lt;Xd&gt;</a><text>, #</text><a hover="For the 64-bit variant: is a 64-bit immediate, the bitwise inverse of which can be encoded in &quot;imm16:hw&quot;." link="hw_imm16__3">&lt;imm&gt;</a></asmtemplate>
        <equivalent_to>
          <asmtemplate><a href="movn.xml#MOVN_64_movewide">MOVN</a><text>  </text><a hover="For the prologue variant: is the 64-bit name of the general-purpose register that holds the destination address and is updated by the instruction, encoded in the &quot;Rd&quot; field." href="movn.xml#XdOrXZR">&lt;Xd&gt;</a><text>, #&lt;imm16&gt;, LSL  #</text><a hover="For the 64-bit variant: is the amount by which to shift the immediate left, either 0 (the default), 16, 32 or 48, encoded in the &quot;hw&quot; field as &amp;lt;shift&amp;gt;/16." href="movn.xml#shift__8">&lt;shift&gt;</a></asmtemplate>
          <aliascond>!(<a link="impl-shared.IsZero.1" file="shared_pseudocode.xml" hover="function: boolean IsZero(bits(N) x)">IsZero</a>(imm16) &amp;&amp; hw != '00')</aliascond>
        </equivalent_to>
      </encoding>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="MOV_MOVN_32_movewide" symboldefcount="1">
      <symbol link="WdOrWZR">&lt;Wd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MOV_MOVN_32_movewide" symboldefcount="1">
      <symbol link="hw_imm16">&lt;imm&gt;</symbol>
      <account encodedin="imm16&lt;13:0&gt;:hw">
        <intro>
          <para>For the 32-bit variant: is a 32-bit immediate, the bitwise inverse of which can be encoded in "imm16:hw", but excluding <hexnumber>0xFFFF0000</hexnumber> and <hexnumber>0x0000FFFF</hexnumber></para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MOV_MOVN_64_movewide" symboldefcount="2">
      <symbol link="hw_imm16__3">&lt;imm&gt;</symbol>
      <account encodedin="imm16&lt;13:0&gt;:hw">
        <intro>
          <para>For the 64-bit variant: is a 64-bit immediate, the bitwise inverse of which can be encoded in "imm16:hw".</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MOV_MOVN_64_movewide" symboldefcount="1">
      <symbol link="XdOrXZR__6">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
</instructionsection>
