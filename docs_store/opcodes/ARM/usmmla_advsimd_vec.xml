<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="USMMLA_advsimd_vec" title="USMMLA (vector) -- A64" type="instruction">
  <docvars>
    <docvar key="advsimd-type" value="simd"/>
    <docvar key="instr-class" value="advsimd"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="USMMLA"/>
  </docvars>
  <heading>USMMLA (vector)</heading>
  <desc>
    <brief>
      <para>Unsigned and signed 8-bit integer matrix multiply-accumulate (vector)</para>
    </brief>
    <authored>
      <para>This instruction multiplies the
2x8 matrix of unsigned 8-bit integer values in the first source vector by the
8x2 matrix of signed 8-bit integer values in the second source vector. The
resulting 2x2 32-bit integer matrix product is destructively added to
the 32-bit integer matrix accumulator in the destination vector. This
is equivalent to performing an 8-way dot product per destination element.</para>
      <para>From Armv8.2 to Armv8.5, this is an <arm-defined-word>OPTIONAL</arm-defined-word> instruction.
From Armv8.6 it is mandatory for implementations that include Advanced SIMD to support it.
<register_link id="AArch64-id_aa64isar1_el1.xml" state="AArch64">ID_AA64ISAR1_EL1</register_link>.I8MM indicates whether this instruction is supported.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1:</para>
    <list type="unordered">
      <listitem>
        <content>The execution time of this instruction is independent of:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
      <listitem>
        <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
    </list>
    <para>Arm expects that the USMMLA (vector) instruction will deliver a peak integer multiply throughput that is at
least as high as can be achieved using two USDOT (vector) instructions, with a goal that it should
have significantly higher throughput.</para>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="Vector" oneof="1" id="iclass_vector" no_encodings="1" isa="A64">
      <docvars>
        <docvar key="advsimd-type" value="simd"/>
        <docvar key="instr-class" value="advsimd"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="USMMLA"/>
      </docvars>
      <iclassintro count="1"/>
      <arch_variants>
        <arch_variant feature="FEAT_I8MM" name="ARMv8.2"/>
      </arch_variants>
      <regdiagram form="32" psname="A64.simd_dp.asimdsame2.USMMLA_asimdsame2_G" tworows="1">
        <box hibit="31" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" name="Q" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="29" name="U" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="28" width="5" settings="5">
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="21" width="1" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="4" settings="4">
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="11" name="B" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="10" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"/>
        </box>
      </regdiagram>
      <encoding name="USMMLA_asimdsame2_G" oneofinclass="1" oneof="1" label="">
        <docvars>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="USMMLA"/>
          <docvar key="instr-class" value="advsimd"/>
          <docvar key="advsimd-type" value="simd"/>
        </docvars>
        <asmtemplate><text>USMMLA  </text><a hover="Is the name of the SIMD&amp;amp;FP third source and destination register, encoded in the &quot;Rd&quot; field." link="Vd__3">&lt;Vd&gt;</a><text>.4S, </text><a hover="Is the name of the first SIMD&amp;amp;FP source register, encoded in the &quot;Rn&quot; field." link="Vn__2">&lt;Vn&gt;</a><text>.16B, </text><a hover="Is the name of the second SIMD&amp;amp;FP source register, encoded in the &quot;Rm&quot; field." link="Vm">&lt;Vm&gt;</a><text>.16B</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.simd_dp.asimdsame2.USMMLA_asimdsame2_G" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if !IsFeatureImplemented(FEAT_I8MM) then UNDEFINED;
constant integer d = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rd);
constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);
constant boolean op1_unsigned = TRUE;
constant boolean op2_unsigned = FALSE;</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="USMMLA_asimdsame2_G" symboldefcount="1">
      <symbol link="Vd__3">&lt;Vd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the name of the SIMD&amp;FP third source and destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="USMMLA_asimdsame2_G" symboldefcount="1">
      <symbol link="Vn__2">&lt;Vn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the name of the first SIMD&amp;FP source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="USMMLA_asimdsame2_G" symboldefcount="1">
      <symbol link="Vm">&lt;Vm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the name of the second SIMD&amp;FP source register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.simd_dp.asimdsame2.USMMLA_asimdsame2_G" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPAdvSIMDEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPAdvSIMDEnabled64()">CheckFPAdvSIMDEnabled64</a>();
constant bits(128) operand1 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[n, 128];
constant bits(128) operand2 = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[m, 128];
constant bits(128) addend   = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, ESize width]">V</a>[d, 128];

<a link="impl-aarch64.V.write.2" file="shared_pseudocode.xml" hover="accessor: V[integer n, ESize width] = bits(width) value">V</a>[d, 128] = <a link="impl-shared.MatMulAdd.5" file="shared_pseudocode.xml" hover="function: bits(N) MatMulAdd(bits(N) addend, bits(N) op1, bits(N) op2, boolean op1_unsigned, boolean op2_unsigned)">MatMulAdd</a>(addend, operand1, operand2, op1_unsigned, op2_unsigned);</pstext></ps>
  </ps_section>
</instructionsection>
