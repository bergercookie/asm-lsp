<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<instructionsection id="CCMN_imm" title="CCMN (immediate) -- A64" type="instruction">
  <docvars>
    <docvar key="immediate-type" value="imm5u"/>
    <docvar key="instr-class" value="general"/>
    <docvar key="isa" value="A64"/>
    <docvar key="mnemonic" value="CCMN"/>
  </docvars>
  <heading>CCMN (immediate)</heading>
  <desc>
    <brief>
      <para>Conditional compare negative (immediate)</para>
    </brief>
    <authored>
      <para>This instruction sets the value of the condition flags to
the result of the comparison of a register value and a negated immediate value
if the condition is TRUE, and an immediate value otherwise.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1:</para>
    <list type="unordered">
      <listitem>
        <content>The execution time of this instruction is independent of:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
      <listitem>
        <content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered">
            <listitem>
              <content>The values of the data supplied in any of its registers.</content>
            </listitem>
            <listitem>
              <content>The values of the NZCV flags.</content>
            </listitem>
          </list>
        </content>
      </listitem>
    </list>
  </operationalnotes>
  <alias_list howmany="0"/>
  <classes>
    <iclass name="5-bit unsigned immediate" oneof="1" id="iclass_5_bit_unsigned_immediate" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="immediate-type" value="imm5u"/>
        <docvar key="instr-class" value="general"/>
        <docvar key="isa" value="A64"/>
        <docvar key="mnemonic" value="CCMN"/>
      </docvars>
      <iclassintro count="2"/>
      <regdiagram form="32" psname="A64.dpreg.condcmp_imm.CCMN_32_condcmp_imm" tworows="1">
        <box hibit="31" width="1" name="sf" usename="1">
          <c colspan="1"/>
        </box>
        <box hibit="30" name="op" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="29" name="S" usename="1" settings="1" psbits="x">
          <c>1</c>
        </box>
        <box hibit="28" width="8" settings="8">
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="imm5" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="15" width="4" name="cond" usename="1">
          <c colspan="4"/>
        </box>
        <box hibit="11" width="1" settings="1">
          <c>1</c>
        </box>
        <box hibit="10" name="o2" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"/>
        </box>
        <box hibit="4" name="o3" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="3" width="4" name="nzcv" usename="1">
          <c colspan="4"/>
        </box>
      </regdiagram>
      <encoding name="CCMN_32_condcmp_imm" oneofinclass="2" oneof="2" label="32-bit" bitdiffs="sf == 0">
        <docvars>
          <docvar key="datatype" value="32"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="CCMN"/>
          <docvar key="immediate-type" value="imm5u"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <asmtemplate><text>CCMN  </text><a hover="Is the 32-bit name of the first general-purpose source register, encoded in the &quot;Rn&quot; field." link="WnOrWZR__3">&lt;Wn&gt;</a><text>, #</text><a hover="Is a five bit unsigned (positive) immediate encoded in the &quot;imm5&quot; field." link="imm__19">&lt;imm&gt;</a><text>, #</text><a hover="Is the flag bit specifier, an immediate in the range 0 to 15, giving the alternative state for the 4-bit NZCV condition flags, encoded in the &quot;nzcv&quot; field." link="nzcv">&lt;nzcv&gt;</a><text>, </text><a hover="Is one of the standard conditions, encoded in the standard way, and " link="cond_option">&lt;cond&gt;</a></asmtemplate>
      </encoding>
      <encoding name="CCMN_64_condcmp_imm" oneofinclass="2" oneof="2" label="64-bit" bitdiffs="sf == 1">
        <docvars>
          <docvar key="datatype" value="64"/>
          <docvar key="isa" value="A64"/>
          <docvar key="mnemonic" value="CCMN"/>
          <docvar key="immediate-type" value="imm5u"/>
          <docvar key="instr-class" value="general"/>
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <asmtemplate><text>CCMN  </text><a hover="Is the 64-bit name of the first general-purpose source register, encoded in the &quot;Rn&quot; field." link="XnOrXZR__12">&lt;Xn&gt;</a><text>, #</text><a hover="Is a five bit unsigned (positive) immediate encoded in the &quot;imm5&quot; field." link="imm__19">&lt;imm&gt;</a><text>, #</text><a hover="Is the flag bit specifier, an immediate in the range 0 to 15, giving the alternative state for the 4-bit NZCV condition flags, encoded in the &quot;nzcv&quot; field." link="nzcv">&lt;nzcv&gt;</a><text>, </text><a hover="Is one of the standard conditions, encoded in the standard way, and " link="cond_option">&lt;cond&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="A64.dpreg.condcmp_imm.CCMN_32_condcmp_imm" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">constant integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
constant integer datasize = 32 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(sf);
constant bits(4) condition = cond;
bits(4) flags = nzcv;
constant bits(datasize) imm = <a link="impl-shared.ZeroExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) ZeroExtend(bits(M) x, integer N)">ZeroExtend</a>(imm5, datasize);</pstext></ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="CCMN_32_condcmp_imm" symboldefcount="1">
      <symbol link="WnOrWZR__3">&lt;Wn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 32-bit name of the first general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CCMN_32_condcmp_imm, CCMN_64_condcmp_imm" symboldefcount="1">
      <symbol link="imm__19">&lt;imm&gt;</symbol>
      <account encodedin="imm5">
        <intro>
          <para>Is a five bit unsigned (positive) immediate encoded in the "imm5" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CCMN_32_condcmp_imm, CCMN_64_condcmp_imm" symboldefcount="1">
      <symbol link="nzcv">&lt;nzcv&gt;</symbol>
      <account encodedin="nzcv">
        <intro>
          <para>Is the flag bit specifier, an immediate in the range 0 to 15, giving the alternative state for the 4-bit NZCV condition flags, encoded in the "nzcv" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="CCMN_32_condcmp_imm, CCMN_64_condcmp_imm" symboldefcount="1">
      <symbol link="cond_option">&lt;cond&gt;</symbol>
      <definition encodedin="cond">
        <intro>Is one of the standard conditions, encoded in the standard way, and </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">cond</entry>
                <entry class="symbol">&lt;cond&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0000</entry>
                <entry class="symbol">EQ</entry>
              </row>
              <row>
                <entry class="bitfield">0001</entry>
                <entry class="symbol">NE</entry>
              </row>
              <row>
                <entry class="bitfield">0010</entry>
                <entry class="symbol">CS</entry>
              </row>
              <row>
                <entry class="bitfield">0011</entry>
                <entry class="symbol">CC</entry>
              </row>
              <row>
                <entry class="bitfield">0100</entry>
                <entry class="symbol">MI</entry>
              </row>
              <row>
                <entry class="bitfield">0101</entry>
                <entry class="symbol">PL</entry>
              </row>
              <row>
                <entry class="bitfield">0110</entry>
                <entry class="symbol">VS</entry>
              </row>
              <row>
                <entry class="bitfield">0111</entry>
                <entry class="symbol">VC</entry>
              </row>
              <row>
                <entry class="bitfield">1000</entry>
                <entry class="symbol">HI</entry>
              </row>
              <row>
                <entry class="bitfield">1001</entry>
                <entry class="symbol">LS</entry>
              </row>
              <row>
                <entry class="bitfield">1010</entry>
                <entry class="symbol">GE</entry>
              </row>
              <row>
                <entry class="bitfield">1011</entry>
                <entry class="symbol">LT</entry>
              </row>
              <row>
                <entry class="bitfield">1100</entry>
                <entry class="symbol">GT</entry>
              </row>
              <row>
                <entry class="bitfield">1101</entry>
                <entry class="symbol">LE</entry>
              </row>
              <row>
                <entry class="bitfield">1110</entry>
                <entry class="symbol">AL</entry>
              </row>
              <row>
                <entry class="bitfield">1111</entry>
                <entry class="symbol">NV</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="CCMN_64_condcmp_imm" symboldefcount="1">
      <symbol link="XnOrXZR__12">&lt;Xn&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the first general-purpose source register, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="A64.dpreg.condcmp_imm.CCMN_32_condcmp_imm" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">if <a link="impl-shared.ConditionHolds.1" file="shared_pseudocode.xml" hover="function: boolean ConditionHolds(bits(4) cond)">ConditionHolds</a>(condition) then
    constant bits(datasize) operand1 = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, datasize];
    constant bits(datasize) operand2 = imm;
    (-, flags) = <a link="impl-shared.AddWithCarry.3" file="shared_pseudocode.xml" hover="function: (bits(N), bits(4)) AddWithCarry(bits(N) x, bits(N) y, bit carry_in)">AddWithCarry</a>(operand1, operand2, '0');
PSTATE.&lt;N,Z,C,V&gt; = flags;</pstext></ps>
  </ps_section>
</instructionsection>
